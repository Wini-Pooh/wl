/**
 * –°–∏—Å—Ç–µ–º–∞ –º–∞—Å–æ–∫ –≤–≤–æ–¥–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ REM
 * –í–µ—Ä—Å–∏—è: 1.0
 * –ê–≤—Ç–æ—Ä: Project Manager
 */

class InputMaskManager {
    constructor() {
        this.masks = {
            currency: {
                mask: '000000000000,00',
                placeholder: '',
                translation: {
                    '0': { pattern: /[0-9]/, optional: true }
                },
                options: {
                    reverse: true,
                    selectOnFocus: true
                }
            },
            decimal: {
                mask: '000000000000,000',
                placeholder: '',
                translation: {
                    '0': { pattern: /[0-9]/, optional: true }
                },
                options: {
                    reverse: true,
                    selectOnFocus: true
                }
            },
            percentage: {
                mask: '000,00',
                placeholder: '',
                translation: {
                    '0': { pattern: /[0-9]/, optional: true }
                },
                options: {
                    reverse: true,
                    selectOnFocus: true
                }
            },
            phone: {
                mask: '+7 (999) 999-99-99',
                placeholder: '+7 (___) ___-__-__',
                options: {
                    selectOnFocus: true
                }
            },
            date: {
                mask: '99.99.9999',
                placeholder: '–¥–¥.–º–º.–≥–≥–≥–≥',
                options: {
                    selectOnFocus: true
                }
            }
        };
        
        this.init();
        this.setupGlobalAjaxIntercept();
    }

    init() {
        console.log('üé≠ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –º–∞—Å–æ–∫ –≤–≤–æ–¥–∞...');
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∞—Å–æ–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        document.addEventListener('DOMContentLoaded', () => {
            this.applyMasks();
        });

        // –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
        $(document).on('shown.bs.modal', (e) => {
            setTimeout(() => {
                this.applyMasks(e.target);
            }, 100);
        });

        // –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Ç–∞–±–æ–≤
        $(document).on('shown.bs.tab', () => {
            setTimeout(() => {
                this.applyMasks();
            }, 100);
        });

        // –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ AJAX-–∑–∞–ø—Ä–æ—Å–æ–≤
        $(document).ajaxSuccess(() => {
            setTimeout(() => {
                this.applyMasks();
            }, 200);
        });

        // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∞—Å–æ–∫ –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        document.addEventListener('focus', (e) => {
            if (e.target.matches('[data-mask]') && !e.target.masked) {
                this.applyMaskToElement(e.target);
            }
        }, true);
    }

    applyMasks() {
        // –ú–∞—Å–∫–∏ –¥–ª—è –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–æ–ª–µ–π
        this.applyMaskToElements('.price-mask, [data-mask="currency"]', 'currency');
        
        // –ú–∞—Å–∫–∏ –¥–ª—è decimal –ø–æ–ª–µ–π (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)
        this.applyMaskToElements('.quantity-mask, [data-mask="decimal"]', 'decimal');
        
        // –ú–∞—Å–∫–∏ –¥–ª—è –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
        this.applyMaskToElements('.progress-mask, [data-mask="percentage"]', 'percentage');
        
        // –ú–∞—Å–∫–∏ –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
        this.applyMaskToElements('.phone-mask, [data-mask="phone"]', 'phone');
        
        // –ú–∞—Å–∫–∏ –¥–ª—è –¥–∞—Ç
        this.applyMaskToElements('.date-mask, [data-mask="date"]', 'date');

        console.log('‚úÖ –ú–∞—Å–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∫–æ –≤—Å–µ–º —ç–ª–µ–º–µ–Ω—Ç–∞–º');
    }

    applyMaskToElements(selector, maskType) {
        const elements = document.querySelectorAll(selector);
        elements.forEach(element => {
            this.applyMaskToElement(element, maskType);
        });
    }

    applyMaskToElement(element, maskType = null) {
        if (element.masked) return; // –£–∂–µ –∑–∞–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–∞—Å–∫–∏
        if (!maskType) {
            maskType = element.getAttribute('data-mask') || this.detectMaskType(element);
        }

        if (!this.masks[maskType]) {
            console.warn(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –º–∞—Å–∫–∏: ${maskType}`);
            return;
        }

        const maskConfig = this.masks[maskType];
        
        try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º jQuery Mask Plugin –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            if (typeof $ !== 'undefined' && $.fn.mask) {
                const options = {
                    placeholder: maskConfig.placeholder,
                    translation: maskConfig.translation || {},
                    ...maskConfig.options
                };
                
                // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –º–∞—Å–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
                $(element).unmask();
                
                $(element).mask(maskConfig.mask, options);
                element.masked = true;
                
                // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–æ–ª–µ–π
                if (maskType === 'currency' || maskType === 'decimal') {
                    this.setupNumericBehavior(element);
                }
                
                // –î–æ–±–∞–≤–ª—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª–µ–π
                this.setupValidation(element, maskType);
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞—â–∏—Ç—É –æ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤–≤–æ–¥–∞
                this.setupInputProtection(element, maskType);
                
                console.log(`‚úÖ –ú–∞—Å–∫–∞ "${maskType}" –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –∫ —ç–ª–µ–º–µ–Ω—Ç—É:`, element.id || element.name || 'unnamed');
            } else {
                // Fallback: –ø—Ä–æ—Å—Ç–∞—è –º–∞—Å–∫–∞ –±–µ–∑ –ø–ª–∞–≥–∏–Ω–∞
                this.applySimpleMask(element, maskType);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∞—Å–∫–∏:', error);
        }
    }

    detectMaskType(element) {
        const classList = element.classList;
        
        if (classList.contains('price-mask')) return 'currency';
        if (classList.contains('quantity-mask')) return 'decimal';
        if (classList.contains('progress-mask')) return 'percentage';
        if (classList.contains('phone-mask')) return 'phone';
        if (classList.contains('date-mask')) return 'date';
        
        return null;
    }

    setupNumericBehavior(element) {
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —á–∏—Å–ª–æ–≤—ã—Ö –ø–æ–ª–µ–π
        element.addEventListener('blur', () => {
            let value = element.value.replace(/[^\d,]/g, '');
            if (value && !value.includes(',') && value !== '0') {
                value += ',00';
                element.value = value;
            }
            // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –Ω—É–ª–∏ –≤ –Ω–∞—á–∞–ª–µ
            if (value.startsWith('0') && value.length > 1 && value[1] !== ',') {
                element.value = value.substring(1);
            }
        });

        // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        element.addEventListener('change', () => {
            this.triggerCalculation(element);
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞
        element.addEventListener('paste', (e) => {
            setTimeout(() => {
                let value = element.value.replace(/[^\d,]/g, '');
                element.value = value;
                this.triggerCalculation(element);
            }, 10);
        });

    
        this.setupFormSubmitHandler(element);
    }

    // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º
    setupFormSubmitHandler(element) {
        // –ù–∞—Ö–æ–¥–∏–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é —Ñ–æ—Ä–º—É
        const form = element.closest('form');
        if (!form) return;

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
        if (form.hasAttribute('data-mask-handler-added')) return;
        form.setAttribute('data-mask-handler-added', 'true');

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
        form.addEventListener('submit', (e) => {
            console.log('üé≠ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã —Å –º–∞—Å–∫–∞–º–∏...');
            
            // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ø–æ–ª—è —Å –º–∞—Å–∫–∞–º–∏ –≤ —Ñ–æ—Ä–º–µ
            const maskedFields = form.querySelectorAll('[data-mask="currency"], [data-mask="decimal"], [data-mask="percentage"], .price-mask, .quantity-mask, .progress-mask');
            
            maskedFields.forEach(field => {
                if (field.value && field.value.trim() !== '') {
                    const originalValue = field.value;
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
                    if (/[{}\[\]\\|]/.test(originalValue)) {
                        console.error(`‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –ø–æ–ª–µ ${field.name}: "${originalValue}"`);
                        
                        // –û—á–∏—â–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
                        const cleanedValue = originalValue.replace(/[{}\[\]\\|]/g, '');
                        field.value = cleanedValue;
                    }
                    
                    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                    const numericValue = this.getNumericValue(field);
                    
                    // –ó–∞–º–µ–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ —á–∏—Å–ª–æ–≤–æ–µ
                    field.value = numericValue.toString();
                    
                    console.log(`‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –ø–æ–ª—è ${field.name}: "${originalValue}" ‚Üí "${field.value}"`);
                    
                    // –ü–ª–∞–Ω–∏—Ä—É–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
                    setTimeout(() => {
                        if (originalValue && !originalValue.includes('{') && !originalValue.includes('[')) {
                            field.value = originalValue;
                        }
                    }, 1000);
                }
            });
        });
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∑–∞–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª–µ–π –≤ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    convertMaskedFieldsToNumbers(form) {
        const maskedFields = form.querySelectorAll('[data-mask="currency"], [data-mask="decimal"], [data-mask="percentage"], .price-mask, .quantity-mask, .progress-mask');
        
        maskedFields.forEach(field => {
            if (field.value && field.value.trim() !== '') {
                // –ü–æ–ª—É—á–∞–µ–º —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±–µ–∑ –º–∞—Å–∫–∏
                const numericValue = this.getNumericValue(field);
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                const originalValue = field.value;
                
                // –í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–º–µ–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è –Ω–∞ —á–∏—Å–ª–æ–≤–æ–µ
                field.value = numericValue.toString();
                
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞—Ç—Ä–∏–±—É—Ç –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
                field.setAttribute('data-original-value', originalValue);
                
                console.log(`‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –ø–æ–ª—è ${field.name}: "${originalValue}" ‚Üí ${numericValue}`);
            }
        });

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
        setTimeout(() => {
            maskedFields.forEach(field => {
                const originalValue = field.getAttribute('data-original-value');
                if (originalValue) {
                    field.value = originalValue;
                    field.removeAttribute('data-original-value');
                }
            });
        }, 500);
    }

    setupValidation(element, maskType) {
        element.addEventListener('invalid', (e) => {
            e.preventDefault();
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—à–∏–±–∫–∏
            element.classList.add('is-invalid');
            
            // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            let feedback = element.parentNode.querySelector('.invalid-feedback');
            if (!feedback) {
                feedback = document.createElement('div');
                feedback.className = 'invalid-feedback';
                element.parentNode.appendChild(feedback);
            }
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –º–∞—Å–∫–∏
            switch(maskType) {
                case 'currency':
                    feedback.textContent = '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1500,00)';
                    break;
                case 'decimal':
                    feedback.textContent = '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2,5)';
                    break;
                case 'phone':
                    feedback.textContent = '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞';
                    break;
                case 'date':
                    feedback.textContent = '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É (–¥–¥.–º–º.–≥–≥–≥–≥)';
                    break;
                default:
                    feedback.textContent = '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ';
            }
        });

        // –£–±–∏—Ä–∞–µ–º –æ—à–∏–±–∫—É –ø—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –≤–≤–æ–¥–µ
        element.addEventListener('input', () => {
            if (element.classList.contains('is-invalid')) {
                element.classList.remove('is-invalid');
                const feedback = element.parentNode.querySelector('.invalid-feedback');
                if (feedback) {
                    feedback.style.display = 'none';
                }
            }
        });
    }

    setupInputProtection(element, maskType) {
        // –ó–∞—â–∏—Ç–∞ –æ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤–≤–æ–¥–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        element.addEventListener('input', (e) => {
            const value = e.target.value;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è —á–∏—Å–ª–æ–≤—ã—Ö –ø–æ–ª–µ–π
            if ((maskType === 'currency' || maskType === 'decimal' || maskType === 'percentage') && 
                /[{}\[\]\\|]/.test(value)) {
                
                // –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
                e.target.value = value.replace(/[{}\[\]\\|]/g, '');
                console.warn(`–£–¥–∞–ª–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏–∑ –ø–æ–ª—è ${e.target.name}`);
            }
        });

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ –ø—Ä–∏ –ø–æ—Ç–µ—Ä–µ —Ñ–æ–∫—É—Å–∞
        element.addEventListener('blur', (e) => {
            const value = e.target.value;
            
            if ((maskType === 'currency' || maskType === 'decimal' || maskType === 'percentage') && 
                /[{}\[\]\\|]/.test(value)) {
                
                // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
                e.target.value = '';
                this.showValidationError(e.target, '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ');
            }
        });
    }

    triggerCalculation(element) {
        // –¢—Ä–∏–≥–≥–µ—Ä –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞ —Å—É–º–º
        const event = new Event('input', { bubbles: true });
        element.dispatchEvent(event);
    }

    applySimpleMask(element, maskType) {
        // –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        console.log(`–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–π –º–∞—Å–∫–∏ ${maskType} –∫ —ç–ª–µ–º–µ–Ω—Ç—É`);
        
        switch(maskType) {
            case 'currency':
            case 'decimal':
                this.setupNumericInput(element);
                break;
            case 'percentage':
                this.setupPercentageInput(element);
                break;
            case 'phone':
                this.setupPhoneInput(element);
                break;
        }
        
        element.masked = true;
    }

    setupNumericInput(element) {
        element.addEventListener('input', (e) => {
            let value = e.target.value.replace(/[^\d,]/g, '');
            
            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
            const parts = value.split(',');
            if (parts.length > 2) {
                value = parts[0] + ',' + parts[1];
            }
            if (parts[1] && parts[1].length > 2) {
                value = parts[0] + ',' + parts[1].substring(0, 2);
            }
            
            e.target.value = value;
        });
    }

    setupPercentageInput(element) {
        element.addEventListener('input', (e) => {
            let value = e.target.value.replace(/[^\d,]/g, '');
            const numValue = parseFloat(value.replace(',', '.')) || 0;
            
            if (numValue > 100) {
                e.target.value = '100';
            } else {
                e.target.value = value;
            }
        });
    }

    setupPhoneInput(element) {
        element.addEventListener('input', (e) => {
            let value = e.target.value.replace(/[^\d]/g, '');
            
            if (value.length >= 1 && value[0] !== '7') {
                value = '7' + value;
            }
            
            if (value.length > 11) {
                value = value.substring(0, 11);
            }
            
            // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            let formatted = '+7';
            if (value.length > 1) {
                formatted += ' (' + value.substring(1, 4);
                if (value.length > 4) {
                    formatted += ') ' + value.substring(4, 7);
                    if (value.length > 7) {
                        formatted += '-' + value.substring(7, 9);
                        if (value.length > 9) {
                            formatted += '-' + value.substring(9, 11);
                        }
                    }
                }
            }
            
            e.target.value = formatted;
        });
    }

    // –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    getNumericValue(element) {
        if (!element) return 0;
        
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã, –≤–∫–ª—é—á–∞—è —Å–∏–º–≤–æ–ª—ã –º–∞—Å–æ–∫
        let value = element.value;
        
        // –£–¥–∞–ª—è–µ–º —Å–∏–º–≤–æ–ª—ã –º–∞—Å–æ–∫ —Ç–∏–ø–∞ {}, [], \, |
        value = value.replace(/[{}\[\]\\|]/g, '');
        
        // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ –∑–∞–ø—è—Ç—ã–µ
        value = value.replace(/[^\d,]/g, '');
        
        // –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É –¥–ª—è parseFloat
        value = value.replace(',', '.');
        
        const result = parseFloat(value) || 0;
        
        console.log(`üî¢ getNumericValue: "${element.value}" ‚Üí "${value}" ‚Üí ${result}`);
        
        return result;
    }

    setNumericValue(element, value) {
        if (!element) return;
        
        const formatted = value.toFixed(2).replace('.', ',');
        element.value = formatted;
        
        // –¢—Ä–∏–≥–≥–µ—Ä —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞
        this.triggerCalculation(element);
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —á–∏—Å—Ç–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä  
    getCleanValue(element) {
        const numericValue = this.getNumericValue(element);
        return numericValue.toString();
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ–ª—è
    validateField(element, rules) {
        if (!element || !rules) return true;
        
        const value = this.getNumericValue(element);
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        if (rules.required && (!element.value || value <= 0)) {
            this.showValidationError(element, '–ü–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è');
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
        if (rules.min !== undefined && value < rules.min) {
            this.showValidationError(element, `–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ${rules.min}`);
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è  
        if (rules.max !== undefined && value > rules.max) {
            this.showValidationError(element, `–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ${rules.max}`);
            return false;
        }
        
        this.hideValidationError(element);
        return true;
    }

    showValidationError(element, message) {
        element.classList.add('is-invalid');
        
        let feedback = element.parentNode.querySelector('.invalid-feedback');
        if (!feedback) {
            feedback = document.createElement('div');
            feedback.className = 'invalid-feedback';
            element.parentNode.appendChild(feedback);
        }
        
        feedback.textContent = message;
        feedback.style.display = 'block';
    }

    hideValidationError(element) {
        element.classList.remove('is-invalid');
        const feedback = element.parentNode.querySelector('.invalid-feedback');
        if (feedback) {
            feedback.style.display = 'none';
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è —Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–∞—Å–æ–∫ (–¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞)
    reinitialize(container = document) {
        console.log('üîÑ –†–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Å–æ–∫ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ:', container);
        
        const elements = container.querySelectorAll('[data-mask], .price-mask, .quantity-mask, .progress-mask, .phone-mask, .date-mask');
        elements.forEach(element => {
            element.masked = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
            this.applyMaskToElement(element);
        });
    }

    // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Å–µ–ø—Ç–æ—Ä –¥–ª—è AJAX –∑–∞–ø—Ä–æ—Å–æ–≤
    setupGlobalAjaxIntercept() {
        // –ò–Ω—Ç–µ—Ä—Å–µ–ø—Ç–æ—Ä –¥–ª—è jQuery AJAX
        if (typeof $ !== 'undefined') {
            const originalAjax = $.ajaxSettings.xhr;
            
            $.ajaxSettings.xhr = function() {
                const xhr = originalAjax.call(this);
                
                // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
                const originalSend = xhr.send;
                xhr.send = function(data) {
                    if (data instanceof FormData) {
                        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—è –≤ FormData
                        const maskManager = window.inputMaskManager;
                        if (maskManager) {
                            maskManager.convertFormDataMasks(data);
                        }
                    }
                    originalSend.call(this, data);
                };
                
                return xhr;
            };
        }

        // –ò–Ω—Ç–µ—Ä—Å–µ–ø—Ç–æ—Ä –¥–ª—è fetch API
        const originalFetch = window.fetch;
        window.fetch = function(url, options = {}) {
            if (options.body instanceof FormData) {
                const maskManager = window.inputMaskManager;
                if (maskManager) {
                    maskManager.convertFormDataMasks(options.body);
                }
            }
            return originalFetch.call(this, url, options);
        };
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ FormData —Å –∑–∞–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    convertFormDataMasks(formData) {
        const entries = Array.from(formData.entries());
        
        entries.forEach(([key, value]) => {
            if (typeof value === 'string' && this.isMaskedNumericValue(value)) {
                const numericValue = this.convertMaskedToNumeric(value);
                formData.set(key, numericValue.toString());
                console.log(`üîÑ FormData –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è: ${key} = "${value}" ‚Üí ${numericValue}`);
            }
        });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –∑–∞–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —á–∏—Å–ª–æ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
    isMaskedNumericValue(value) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –º–∞—Å–æ–∫
        return /[\{\}\[\]\\|]/.test(value) || /^\d+,\d+$/.test(value);
    }

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∑–∞–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —á–∏—Å–ª–æ–≤–æ–µ
    convertMaskedToNumeric(value) {
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä –∏ –∑–∞–ø—è—Ç—ã—Ö
        const cleaned = value.replace(/[^\d,]/g, '');
        // –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —á–∏—Å–ª–æ
        return parseFloat(cleaned.replace(',', '.')) || 0;
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
window.inputMaskManager = new InputMaskManager();

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = InputMaskManager;
}

console.log('üé≠ Input Mask Manager –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
