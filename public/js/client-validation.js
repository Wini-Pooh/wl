/**
 * –ö–ª–∏–µ–Ω—Ç—Å–∫–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º –¥–ª—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –º–≥–Ω–æ–≤–µ–Ω–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
 */

(function() {
    'use strict';

    /**
     * –ü—Ä–∞–≤–∏–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–æ–ª–µ–π
     */
    const validationRules = {
        required: {
            test: (value) => value && value.trim().length > 0,
            message: '–≠—Ç–æ –ø–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è'
        },
        currency: {
            test: (value) => {
                if (!value || value.trim() === '') return false;
                // –†–∞–∑—Ä–µ—à–∞–µ–º —á–∏—Å–ª–∞ —Å –∑–∞–ø—è—Ç–æ–π –∏–ª–∏ —Ç–æ—á–∫–æ–π –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö
                const cleanValue = value.replace(/\s/g, '').replace(',', '.');
                const num = parseFloat(cleanValue);
                return !isNaN(num) && num >= 0 && /^\d+([.,]\d{0,2})?$/.test(value.replace(/\s/g, ''));
            },
            message: '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1234.56)'
        },
        quantity: {
            test: (value) => {
                if (!value || value.trim() === '') return false;
                // –†–∞–∑—Ä–µ—à–∞–µ–º —á–∏—Å–ª–∞ —Å –∑–∞–ø—è—Ç–æ–π –∏–ª–∏ —Ç–æ—á–∫–æ–π –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö
                const cleanValue = value.replace(/\s/g, '').replace(',', '.');
                const num = parseFloat(cleanValue);
                return !isNaN(num) && num > 0 && /^\d+([.,]\d{0,3})?$/.test(value.replace(/\s/g, ''));
            },
            message: '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–ª—å—à–µ 0'
        },
        phone: {
            test: (value) => /^\+7\s\(\d{3}\)\s\d{3}-\d{2}-\d{2}$/.test(value),
            message: '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7 (999) 999-99-99'
        },
        email: {
            test: (value) => /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(value),
            message: '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å'
        },
        date: {
            test: (value) => {
                if (!value) return true; // –î–ª—è –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –¥–∞—Ç
                const date = new Date(value);
                return date instanceof Date && !isNaN(date);
            },
            message: '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É'
        },
        percentage: {
            test: (value) => {
                const num = parseFloat(value);
                return !isNaN(num) && num >= 0 && num <= 100;
            },
            message: '–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç 0 –¥–æ 100'
        }
    };

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—è
     */
    function showFieldError(field, message) {
        clearFieldError(field);
        
        field.classList.add('is-invalid');
        
        const feedback = document.createElement('div');
        feedback.className = 'invalid-feedback';
        feedback.textContent = message;
        
        field.parentNode.appendChild(feedback);
    }

    /**
     * –û—á–∏—Å—Ç–∏—Ç—å –æ—à–∏–±–∫—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—è
     */
    function clearFieldError(field) {
        field.classList.remove('is-invalid');
        field.classList.remove('is-valid');
        
        const existingFeedback = field.parentNode.querySelector('.invalid-feedback');
        if (existingFeedback) {
            existingFeedback.remove();
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —É—Å–ø–µ—à–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–ª—è –ø–æ–ª—è
     */
    function showFieldSuccess(field) {
        clearFieldError(field);
        field.classList.add('is-valid');
    }

    /**
     * –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –æ–¥–Ω–æ –ø–æ–ª–µ
     */
    function validateField(field) {
        const value = field.value;
        const rules = field.dataset.validate ? field.dataset.validate.split('|') : [];
        const isRequired = field.hasAttribute('required') || rules.includes('required');
        
        // –ï—Å–ª–∏ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ –∏ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ - –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞
        if (!value.trim() && !isRequired) {
            clearFieldError(field);
            return true;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        if (isRequired && !validationRules.required.test(value)) {
            showFieldError(field, validationRules.required.message);
            return false;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª
        for (const rule of rules) {
            if (validationRules[rule] && !validationRules[rule].test(value)) {
                showFieldError(field, validationRules[rule].message);
                return false;
            }
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ CSS –∫–ª–∞—Å—Å–æ–≤ –∏ data-mask
        const dataMask = field.dataset.mask;
        if (dataMask && validationRules[dataMask] && !validationRules[dataMask].test(value)) {
            showFieldError(field, validationRules[dataMask].message);
            return false;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ CSS –∫–ª–∞—Å—Å–æ–≤
        if (field.classList.contains('price-mask') && value && !validationRules.currency.test(value)) {
            showFieldError(field, validationRules.currency.message);
            return false;
        }

        if (field.classList.contains('quantity-mask') && value && !validationRules.quantity.test(value)) {
            showFieldError(field, validationRules.quantity.message);
            return false;
        }

        if (field.classList.contains('phone-mask') && value && !validationRules.phone.test(value)) {
            showFieldError(field, validationRules.phone.message);
            return false;
        }

        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –¥–∞—Ç
        if (field.type === 'date' && value && !validationRules.date.test(value)) {
            showFieldError(field, validationRules.date.message);
            return false;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        if (field.min && parseFloat(value) < parseFloat(field.min)) {
            showFieldError(field, `–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ${field.min}`);
            return false;
        }

        if (field.max && parseFloat(value) > parseFloat(field.max)) {
            showFieldError(field, `–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ${field.max}`);
            return false;
        }

        // –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã
        showFieldSuccess(field);
        return true;
    }

    /**
     * –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –≤—Å—é —Ñ–æ—Ä–º—É
     */
    function validateForm(form) {
        const fields = form.querySelectorAll('input, select, textarea');
        let isValid = true;

        fields.forEach(field => {
            if (!validateField(field)) {
                isValid = false;
            }
        });

        return isValid;
    }

    /**
     * –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫ –ø–æ–ª—é
     */
    function addFieldValidation(field) {
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–∏ –ø–æ—Ç–µ—Ä–µ —Ñ–æ–∫—É—Å–∞
        field.addEventListener('blur', function() {
            validateField(this);
        });

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–∏ –≤–≤–æ–¥–µ (—Å –∑–∞–¥–µ—Ä–∂–∫–æ–π)
        let timeout;
        field.addEventListener('input', function() {
            clearTimeout(timeout);
            timeout = setTimeout(() => {
                validateField(this);
            }, 500);
        });
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è —Ñ–æ—Ä–º—ã
     */
    function initFormValidation(form) {
        console.log('üîç –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è —Ñ–æ—Ä–º—ã:', form.id);

        // –î–æ–±–∞–≤–ª—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –∫ –ø–æ–ª—è–º
        const fields = form.querySelectorAll('input, select, textarea');
        fields.forEach(addFieldValidation);

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ä–º—ã
        form.addEventListener('submit', function(e) {
            console.log('üìù –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ...');
            
            if (!validateForm(this)) {
                e.preventDefault();
                e.stopPropagation();
                
                // –§–æ–∫—É—Å –Ω–∞ –ø–µ—Ä–≤–æ–µ –ø–æ–ª–µ —Å –æ—à–∏–±–∫–æ–π
                const firstErrorField = this.querySelector('.is-invalid');
                if (firstErrorField) {
                    firstErrorField.focus();
                    firstErrorField.scrollIntoView({ behavior: 'smooth', block: 'center' });
                }
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                if (typeof showMessage === 'function') {
                    showMessage('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –≤ —Ñ–æ—Ä–º–µ', 'warning');
                }
                
                return false;
            }
        });
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö —Ñ–æ—Ä–º
     */
    function initAllFormsValidation() {
        console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏...');

        // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ñ–æ—Ä–º—ã –≤ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–Ω–∞—Ö
        const modalForms = document.querySelectorAll('.modal form');
        modalForms.forEach(initFormValidation);

        // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ñ–æ—Ä–º—ã —Å –∫–ª–∞—Å—Å–æ–º ajax-form
        const ajaxForms = document.querySelectorAll('.ajax-form');
        ajaxForms.forEach(initFormValidation);
    }

    /**
     * –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
     */
    function reinitValidation(container) {
        if (!container) {
            initAllFormsValidation();
            return;
        }

        console.log('üîÑ –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ:', container);

        const forms = container.querySelectorAll('form');
        forms.forEach(initFormValidation);
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–µ
     */
    function clearFormErrors(form) {
        const fields = form.querySelectorAll('.is-invalid, .is-valid');
        fields.forEach(field => {
            clearFieldError(field);
        });
    }

    // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    window.ClientValidation = {
        init: initAllFormsValidation,
        reinit: reinitValidation,
        validateForm: validateForm,
        validateField: validateField,
        clearFormErrors: clearFormErrors,
        showFieldError: showFieldError,
        clearFieldError: clearFieldError
    };

    // –ê–≤—Ç–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
    document.addEventListener('DOMContentLoaded', function() {
        initAllFormsValidation();
    });

    // –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
    $(document).on('shown.bs.modal', function(e) {
        setTimeout(function() {
            reinitValidation(e.target);
        }, 100);
    });

    // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π clearFormErrors
    if (!window.clearFormErrors) {
        window.clearFormErrors = clearFormErrors;
    }

})();
