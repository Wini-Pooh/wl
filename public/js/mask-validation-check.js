/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∞—Å–æ–∫ –≤ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–Ω–∞—Ö
 * –í–µ—Ä—Å–∏—è: 1.0
 */

class MaskValidationChecker {
    constructor() {
        this.requiredMasks = {
            // Work Modal
            '#workPrice': 'currency',
            '#workQuantity': 'decimal', 
            '#workPaidAmount': 'currency',
            '#workPaymentDate': 'date',
            
            // Material Modal
            '#materialPrice': 'currency',
            '#materialQuantity': 'decimal',
            '#materialPaidAmount': 'currency', 
            '#materialPaymentDate': 'date',
            
            // Transport Modal
            '#transportPrice': 'currency',
            '#transportQuantity': 'decimal',
            '#transportPaidAmount': 'currency',
            '#transportPaymentDate': 'date'
        };
        
        this.init();
    }
    
    init() {
        console.log('üîç –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∞—Å–æ–∫...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Å–∫–∏ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
        $(document).on('shown.bs.modal', (e) => {
            setTimeout(() => {
                this.checkModalMasks(e.target);
            }, 200);
        });
        
        // –û–±—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        document.addEventListener('DOMContentLoaded', () => {
            setTimeout(() => {
                this.checkAllMasks();
            }, 1000);
        });
    }
    
    checkModalMasks(modal) {
        const modalId = modal.id;
        console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Å–æ–∫ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ: ${modalId}`);
        
        Object.keys(this.requiredMasks).forEach(selector => {
            const element = modal.querySelector(selector);
            if (element) {
                this.checkElementMask(element, selector);
            }
        });
    }
    
    checkAllMasks() {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –º–∞—Å–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ...');
        
        Object.keys(this.requiredMasks).forEach(selector => {
            const element = document.querySelector(selector);
            if (element) {
                this.checkElementMask(element, selector);
            }
        });
    }
    
    checkElementMask(element, selector) {
        const expectedMask = this.requiredMasks[selector];
        const hasMask = element.masked || false;
        const hasClass = this.getMaskClassFromElement(element);
        const hasDataMask = element.getAttribute('data-mask');
        
        const status = {
            selector: selector,
            expectedMask: expectedMask,
            hasMask: hasMask,
            hasClass: hasClass,
            hasDataMask: hasDataMask,
            element: element
        };
        
        if (!hasMask) {
            console.warn(`‚ùå –ú–∞—Å–∫–∞ –Ω–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –¥–ª—è ${selector}`, status);
            this.fixMask(element, expectedMask);
        } else {
            console.log(`‚úÖ –ú–∞—Å–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –¥–ª—è ${selector}`, status);
        }
    }
    
    getMaskClassFromElement(element) {
        const classes = Array.from(element.classList);
        const maskClasses = classes.filter(cls => cls.includes('mask'));
        return maskClasses.length > 0 ? maskClasses : null;
    }
    
    fixMask(element, maskType) {
        console.log(`üîß –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –º–∞—Å–∫—É –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞: ${element.id || element.name}`);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫–ª–∞—Å—Å –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        switch(maskType) {
            case 'currency':
                if (!element.classList.contains('price-mask')) {
                    element.classList.add('price-mask');
                }
                if (!element.getAttribute('data-mask')) {
                    element.setAttribute('data-mask', 'currency');
                }
                break;
            case 'decimal':
                if (!element.classList.contains('quantity-mask')) {
                    element.classList.add('quantity-mask');
                }
                if (!element.getAttribute('data-mask')) {
                    element.setAttribute('data-mask', 'decimal');
                }
                break;
            case 'date':
                if (!element.classList.contains('date-mask')) {
                    element.classList.add('date-mask');
                }
                if (!element.getAttribute('data-mask')) {
                    element.setAttribute('data-mask', 'date');
                }
                break;
        }
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∞—Å–∫—É —á–µ—Ä–µ–∑ inputMaskManager
        if (window.inputMaskManager) {
            element.masked = false; // –°–±—Ä–æ—Å —Ñ–ª–∞–≥–∞
            window.inputMaskManager.applyMaskToElement(element, maskType);
        }
    }
    
    // –ú–µ—Ç–æ–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    testModal(modalId) {
        const modal = document.getElementById(modalId);
        if (!modal) {
            console.error(`–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ ${modalId} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
            return;
        }
        
        console.log(`üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞: ${modalId}`);
        this.checkModalMasks(modal);
    }
    
    // –û—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤—Å–µ—Ö –º–∞—Å–æ–∫
    generateReport() {
        console.log('üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –º–∞—Å–æ–∫...');
        
        const report = {
            total: 0,
            applied: 0,
            missing: 0,
            details: []
        };
        
        Object.keys(this.requiredMasks).forEach(selector => {
            const element = document.querySelector(selector);
            report.total++;
            
            if (element) {
                const hasMask = element.masked || false;
                if (hasMask) {
                    report.applied++;
                } else {
                    report.missing++;
                }
                
                report.details.push({
                    selector: selector,
                    exists: true,
                    hasMask: hasMask,
                    expectedMask: this.requiredMasks[selector]
                });
            } else {
                report.details.push({
                    selector: selector,
                    exists: false,
                    hasMask: false,
                    expectedMask: this.requiredMasks[selector]
                });
            }
        });
        
        console.table(report.details);
        console.log(`üìà –ò—Ç–æ–≥–æ: ${report.applied}/${report.total} –º–∞—Å–æ–∫ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ, ${report.missing} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç`);
        
        return report;
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
window.maskValidationChecker = new MaskValidationChecker();

// –î–æ–±–∞–≤–ª—è–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
window.checkMasks = () => window.maskValidationChecker.generateReport();
window.testModal = (modalId) => window.maskValidationChecker.testModal(modalId);

console.log('üîç Mask Validation Checker –∑–∞–≥—Ä—É–∂–µ–Ω');
console.log('üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ checkMasks() –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–∞—Å–æ–∫');
console.log('üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ testModal("modalId") –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞');
