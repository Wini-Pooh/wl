Как пользоваться S3 API
Статья создана

Yandex Cloud
Обновлена 19 мая 2025 г.
Подготовка к работе
Чтобы воспользоваться API:

Создайте сервисный аккаунт.

Назначьте сервисному аккаунту роли, которые нужны для вашего проекта, например storage.editor на бакет — для работы с конкретным бакетом, или на каталог — для работы со всеми бакетами в каталоге. Подробнее о ролях см. на странице Управление доступом с помощью Yandex Identity and Access Management.

Чтобы работать с объектами в зашифрованном бакете, у пользователя или сервисного аккаунта вместе с ролью storage.configurer должны быть следующие роли на ключ шифрования:

kms.keys.encrypter — для чтения ключа, шифрования и загрузки объектов;
kms.keys.decrypter — для чтения ключа, расшифровки и скачивания объектов;
kms.keys.encrypterDecrypter — включает разрешения, предоставляемые ролями kms.keys.encrypter и kms.keys.decrypter.
Подробнее см. Сервисные роли Key Management Service.

Создайте статический ключ доступа.

В результате вы получите данные статического ключа доступа. Для аутентификации в Object Storage вам понадобятся:

key_id — идентификатор статического ключа доступа;
secret — секретный ключ.
Сохраните key_id и secret, так как повторное получение значения ключа будет невозможно.

Авторизация статическими ключами необходима для обращения напрямую к HTTP API и поддерживается инструментами, перечисленными в разделе Поддерживаемые инструменты.

Статический ключ для доступа к Object Storage можно безопасно хранить в сервисе Yandex Lockbox. Подробнее см. Использование секрета Yandex Lockbox для хранения статического ключа доступа.

Перечень поддерживаемых методов Amazon S3 HTTP API смотрите в Справочнике API.

Общий вид запроса к API
Примечание

Для работы с S3 API в Object Storage лучше использовать AWS CLI или AWS SDK, подходящий для вашей среды разработки.

Общий вид запроса к Object Storage API:

{GET|HEAD|PUT|DELETE} /<имя_бакета>/<ключ_объекта> HTTP/2
Host: storage.yandexcloud.net
Content-Length: length
Date: date
Authorization: authorization string (AWS Signature Version 4)

Request_body

Запрос содержит HTTP-метод, имя бакета и ключ объекта.

Имя бакета можно указать как часть имени хоста. В этом случае запрос примет вид:

{GET|HEAD|PUT|DELETE} /<ключ_объекта> HTTP/2
Host: <имя_бакета>.storage.yandexcloud.net
...

Набор заголовков зависит от конкретного запроса и описан в документации на соответствующий запрос.

Если вы используете API напрямую (без SDK и приложений), то для подписи запросов вам придется самостоятельно генерировать заголовок Authorization. О том, как это сделать, читайте в разделе Authenticating Requests (AWS Signature Version 4) документации Amazon S3.

Отрабатывать процесс формирования запроса и подписи вы можете с помощью AWS CLI в режиме отладки.

Чтобы отправить подписанный запрос к S3 API, вы можете использовать утилиту curl.

URL для запроса
URL может иметь одну из следующих форм:

http(s)://storage.yandexcloud.net/<имя_бакета>/<ключ_объекта>?<query-параметры>
http(s)://<имя_бакета>.storage.yandexcloud.net/<ключ_объекта>?<query-параметры>
Примечание

Для бакетов с точками в имени, например example.ru, протокол HTTPS доступен только c URL в формате https://storage.yandexcloud.net/<имя_бакета>/<ключ_объекта>?<query-параметры>. Подробнее см. в Обращение к бакету по HTTPS.

URL содержит имя бакета, ключ объекта и query-параметры. Пример возможных query-параметров см. в описании метода для получения объекта.

Примечание

Если вы используете AWS SDK для .NET, обращайтесь к хосту s3.yandexcloud.net.

CORS запросы
Кросс-доменные запросы доступны для всех методов API, которые управляют объектами.

Для проверки разрешений CORS подразумевает предварительный запрос options к ресурсу. Object Storage позволяет отправлять кросс-доменные запросы к ресурсам без предварительного запроса, при этом в запросе должны быть те же заголовки, что и у предварительного запроса.

См. также
Начало работы с AWS S3 API в Yandex Object Storage
Отладка запросов с помощью утилиты AWS CLI
Пример отправки подписанного запроса с помощью утилиты curl
Пример кода для генерации подписи



Начало работы с AWS S3 API в Yandex Object Storage
Статья создана

Yandex Cloud
Обновлена 19 мая 2025 г.
AWS S3 API — это интерфейс взаимодействия с сервисами AWS, совместимый с Yandex Object Storage.

С помощью AWS S3 API вы создадите бакет, загрузите в него объект, получите список объектов в бакете, скачаете объект из бакета, удалите объект и удалите бакет.

Примечание

Чтобы использовать AWS S3 API напрямую, без SDK и приложений, необходимо самостоятельно подписывать запросы. Процесс формирования запроса и подписи вы можете отработать с помощью AWS CLI в режиме отладки.

Подготовьте облако к работе
Зарегистрируйтесь в Yandex Cloud и создайте платежный аккаунт:

Перейдите в консоль управления, затем войдите в Yandex Cloud или зарегистрируйтесь.
На странице Yandex Cloud Billing убедитесь, что у вас подключен платежный аккаунт, и он находится в статусе ACTIVE или TRIAL_ACTIVE. Если платежного аккаунта нет, создайте его и привяжите к нему облако.
Если у вас есть активный платежный аккаунт, вы можете создать или выбрать каталог, в котором будет работать ваша инфраструктура, на странице облака.

Подробнее об облаках и каталогах.

Создайте сервисный аккаунт и статический ключ доступа
Для аутентификации в AWS S3 API используется статический ключ доступа. Статический ключ доступа выпускается для сервисного аккаунта, и все действия с использованием ключа выполняются от имени этого сервисного аккаунта.

Создайте сервисный аккаунт.

Назначьте сервисному аккаунту роль storage.editor на каталог. Это позволит работать от имени этого сервисного аккаунта со всеми бакетами в каталоге.

Создайте статический ключ доступа.

В результате вы получите данные статического ключа доступа. Для аутентификации в Object Storage вам понадобятся:

key_id — идентификатор статического ключа доступа;
secret — секретный ключ.
Сохраните key_id и secret, так как повторное получение значения ключа будет невозможно.

Установите утилиту curl.

Начиная с версии 8.3.0, утилита curl при работе с AWS S3 API поддерживает автоматическое формирование строки для подписи, подпись запроса и подстановку необходимых заголовков.

При использовании более ранних версий утилиты curl вы можете формировать необходимые заголовки и подписывать запросы вручную.

Создайте бакет
Задайте переменные, содержащие необходимые данные:

AWS_KEY_ID="<идентификатор_статического_ключа>"
AWS_SECRET_KEY="<секретный_ключ>"
BUCKET_NAME="<имя_бакета>"

Где:

AWS_KEY_ID — идентификатор статического ключа доступа.
AWS_SECRET_KEY — секретный ключ.
BUCKET_NAME — имя создаваемого бакета.
Выполните HTTP-запрос:

curl \
  --request PUT \
  --user "${AWS_KEY_ID}:${AWS_SECRET_KEY}" \
  --aws-sigv4 "aws:amz:ru-central1:s3" \
  --verbose \
  "https://storage.yandexcloud.net/${BUCKET_NAME}"

Результат:

...
< HTTP/2 200
< server: nginx
< date: Wed, 14 May 2025 20:00:04 GMT
< content-type: application/octet-stream
< location: /my-sample-bucket
< x-amz-request-id: a5cf0b8d********
<
* Connection #0 to host storage.yandexcloud.net left intact





Загрузите объект в бакет
Задайте переменные, содержащие необходимые данные:

AWS_KEY_ID="<идентификатор_статического_ключа>"
AWS_SECRET_KEY="<секретный_ключ>"
LOCAL_FILE="<путь_к_локальному_файлу>"
BUCKET_NAME="<имя_бакета>"
OBJECT_PATH="<ключ_объекта>"

Где:

AWS_KEY_ID — идентификатор статического ключа доступа.
AWS_SECRET_KEY — секретный ключ.
LOCAL_FILE — путь к локальному файлу, который вы хотите загрузить. Например: ./sample.txt.
BUCKET_NAME — имя бакета, в который загружается файл.
OBJECT_PATH — ключ, который будет присвоен объекту в бакете. Например: new-prefix/sample-object.txt.
Выполните HTTP-запрос:

curl \
  --request PUT \
  --user "${AWS_KEY_ID}:${AWS_SECRET_KEY}" \
  --aws-sigv4 "aws:amz:ru-central1:s3" \
  --upload-file "${LOCAL_FILE}" \
  --verbose \
  "https://storage.yandexcloud.net/${BUCKET_NAME}/${OBJECT_PATH}"

Результат:

...
< HTTP/2 200
< server: nginx
< date: Thu, 15 May 2025 07:17:46 GMT
< content-type: text/plain
< etag: "f75a361db63aa4722fb8e083********"
< x-amz-request-id: 40afeceb********
<
* Connection #0 to host storage.yandexcloud.net left intact





Получите список объектов в бакете
Задайте переменные, содержащие необходимые данные:

AWS_KEY_ID="<идентификатор_статического_ключа>"
AWS_SECRET_KEY="<секретный_ключ>"
BUCKET_NAME="<имя_бакета>"

Где:

AWS_KEY_ID — идентификатор статического ключа доступа.
AWS_SECRET_KEY — секретный ключ.
BUCKET_NAME — имя бакета, список объектов которого требуется получить.
Выполните HTTP-запрос:

curl \
  --request GET \
  --user "${AWS_KEY_ID}:${AWS_SECRET_KEY}" \
  --aws-sigv4 "aws:amz:ru-central1:s3" \
  --verbose \
  "https://storage.yandexcloud.net/${BUCKET_NAME}?list-type=2"

Результат:

...
< HTTP/2 200
< server: nginx
< date: Thu, 15 May 2025 07:44:41 GMT
< content-type: application/xml; charset=UTF-8
< content-length: 569
< x-amz-request-id: cab0999d********
<
<?xml version="1.0" encoding="UTF-8"?>
* Connection #0 to host storage.yandexcloud.net left intact
<ListBucketResult
    xmlns="http://s3.amazonaws.com/doc/2006-03-01/">
    <KeyCount>1</KeyCount>
    <Name>my-sample-bucket</Name>
    <Prefix></Prefix>
    <MaxKeys>1000</MaxKeys>
    <IsTruncated>false</IsTruncated>
    <Contents>
        <Key>text.txt</Key>
        <LastModified>2025-05-15T07:23:08.030Z</LastModified>
        <Owner>
            <ID>ajegtlf2q28a********</ID>
            <DisplayName>ajegtlf2q28a********</DisplayName>
        </Owner>
        <ETag>&#34;f75a361db63aa4722fb8e083********&#34;</ETag>
        <Size>103</Size>
        <StorageClass>STANDARD</StorageClass>
        <TagSet></TagSet>
    </Contents>
</ListBucketResult>





Скачайте объект из бакета
Задайте переменные, содержащие необходимые данные:

AWS_KEY_ID="<идентификатор_статического_ключа>"
AWS_SECRET_KEY="<секретный_ключ>"
BUCKET_NAME="<имя_бакета>"
OBJECT_PATH="<ключ_объекта>"
LOCAL_FILE="<путь_к_локальному_файлу>"

Где:

AWS_KEY_ID — идентификатор статического ключа доступа.
AWS_SECRET_KEY — секретный ключ.
BUCKET_NAME — имя бакета, в котором находится скачиваемый объект.
OBJECT_PATH — ключ скачиваемого объекта в бакете. Например: new-prefix/sample-object.txt.
LOCAL_FILE — путь к локальному файлу, в который вы хотите сохранить скачанный объект. Например: ./sample.txt.
Выполните HTTP-запрос:

curl \
  --request GET \
  --user "${AWS_KEY_ID}:${AWS_SECRET_KEY}" \
  --aws-sigv4 "aws:amz:ru-central1:s3" \
  --verbose \
  "https://storage.yandexcloud.net/${BUCKET_NAME}/${OBJECT_PATH}" \
  > ${LOCAL_FILE}

Результат:

...
< HTTP/2 200
< server: nginx
< date: Thu, 15 May 2025 08:55:19 GMT
< content-type: text/plain
< content-length: 103
< accept-ranges: bytes
< etag: "f75a361db63aa4722fb8e083********"
< last-modified: Thu, 15 May 2025 07:23:08 GMT
< x-amz-request-id: 1afc3ec9********
<
{ [103 bytes data]
100   103  100   103    0     0   1925      0 --:--:-- --:--:-- --:--:--  1943
* Connection #0 to host storage.yandexcloud.net left intact





Скачанный объект сохранен в файл, путь к которому задан в переменной LOCAL_FILE.

Удалите объект в бакете
Задайте переменные, содержащие необходимые данные:

AWS_KEY_ID="<идентификатор_статического_ключа>"
AWS_SECRET_KEY="<секретный_ключ>"
BUCKET_NAME="<имя_бакета>"
OBJECT_PATH="<ключ_объекта>"

Где:

AWS_KEY_ID — идентификатор статического ключа доступа.
AWS_SECRET_KEY — секретный ключ.
BUCKET_NAME — имя бакета, из которого удаляется объект.
OBJECT_PATH — ключ удаляемого объекта в бакете. Например: new-prefix/sample-object.txt.
Выполните HTTP-запрос:

curl \
  --request DELETE \
  --user "${AWS_KEY_ID}:${AWS_SECRET_KEY}" \
  --aws-sigv4 "aws:amz:ru-central1:s3" \
  --verbose \
  "https://storage.yandexcloud.net/${BUCKET_NAME}/${OBJECT_PATH}"

Результат:

...
< HTTP/2 204
< server: nginx
< date: Thu, 15 May 2025 14:24:01 GMT
< x-amz-request-id: 7d2f023c********
<
* Connection #0 to host storage.yandexcloud.net left intact





Удалите бакет
Задайте переменные, содержащие необходимые данные:

AWS_KEY_ID="<идентификатор_статического_ключа>"
AWS_SECRET_KEY="<секретный_ключ>"
BUCKET_NAME="<имя_бакета>"

Где:

AWS_KEY_ID — идентификатор статического ключа доступа.
AWS_SECRET_KEY — секретный ключ.
BUCKET_NAME — имя удаляемого бакета. Удаляемый бакет не должен содержать объектов.
Выполните HTTP-запрос:

curl \
  --request DELETE \
  --user "${AWS_KEY_ID}:${AWS_SECRET_KEY}" \
  --aws-sigv4 "aws:amz:ru-central1:s3" \
  --verbose \
  "https://storage.yandexcloud.net/${BUCKET_NAME}"

Результат:

...
< HTTP/2 204
< server: nginx
< date: Thu, 15 May 2025 14:35:57 GMT
< x-amz-request-id: 6a13b7ae********
<
* Connection #0 to host storage.yandexcloud.net left intact





См. также
Как пользоваться S3 API
Аутентификация в API Object Storage
Подписывание запросов
Была ли статья полезна?

Как пользоваться S3 API
Статья создана

Yandex Cloud
Обновлена 19 мая 2025 г.
Подготовка к работе
Чтобы воспользоваться API:

Создайте сервисный аккаунт.

Назначьте сервисному аккаунту роли, которые нужны для вашего проекта, например storage.editor на бакет — для работы с конкретным бакетом, или на каталог — для работы со всеми бакетами в каталоге. Подробнее о ролях см. на странице Управление доступом с помощью Yandex Identity and Access Management.

Чтобы работать с объектами в зашифрованном бакете, у пользователя или сервисного аккаунта вместе с ролью storage.configurer должны быть следующие роли на ключ шифрования:

kms.keys.encrypter — для чтения ключа, шифрования и загрузки объектов;
kms.keys.decrypter — для чтения ключа, расшифровки и скачивания объектов;
kms.keys.encrypterDecrypter — включает разрешения, предоставляемые ролями kms.keys.encrypter и kms.keys.decrypter.
Подробнее см. Сервисные роли Key Management Service.

Создайте статический ключ доступа.

В результате вы получите данные статического ключа доступа. Для аутентификации в Object Storage вам понадобятся:

key_id — идентификатор статического ключа доступа;
secret — секретный ключ.
Сохраните key_id и secret, так как повторное получение значения ключа будет невозможно.

Авторизация статическими ключами необходима для обращения напрямую к HTTP API и поддерживается инструментами, перечисленными в разделе Поддерживаемые инструменты.

Статический ключ для доступа к Object Storage можно безопасно хранить в сервисе Yandex Lockbox. Подробнее см. Использование секрета Yandex Lockbox для хранения статического ключа доступа.

Перечень поддерживаемых методов Amazon S3 HTTP API смотрите в Справочнике API.

Общий вид запроса к API
Примечание

Для работы с S3 API в Object Storage лучше использовать AWS CLI или AWS SDK, подходящий для вашей среды разработки.

Общий вид запроса к Object Storage API:

{GET|HEAD|PUT|DELETE} /<имя_бакета>/<ключ_объекта> HTTP/2
Host: storage.yandexcloud.net
Content-Length: length
Date: date
Authorization: authorization string (AWS Signature Version 4)

Request_body

Запрос содержит HTTP-метод, имя бакета и ключ объекта.

Имя бакета можно указать как часть имени хоста. В этом случае запрос примет вид:

{GET|HEAD|PUT|DELETE} /<ключ_объекта> HTTP/2
Host: <имя_бакета>.storage.yandexcloud.net
...

Набор заголовков зависит от конкретного запроса и описан в документации на соответствующий запрос.

Если вы используете API напрямую (без SDK и приложений), то для подписи запросов вам придется самостоятельно генерировать заголовок Authorization. О том, как это сделать, читайте в разделе Authenticating Requests (AWS Signature Version 4) документации Amazon S3.

Отрабатывать процесс формирования запроса и подписи вы можете с помощью AWS CLI в режиме отладки.

Чтобы отправить подписанный запрос к S3 API, вы можете использовать утилиту curl.

URL для запроса
URL может иметь одну из следующих форм:

http(s)://storage.yandexcloud.net/<имя_бакета>/<ключ_объекта>?<query-параметры>
http(s)://<имя_бакета>.storage.yandexcloud.net/<ключ_объекта>?<query-параметры>
Примечание

Для бакетов с точками в имени, например example.ru, протокол HTTPS доступен только c URL в формате https://storage.yandexcloud.net/<имя_бакета>/<ключ_объекта>?<query-параметры>. Подробнее см. в Обращение к бакету по HTTPS.

URL содержит имя бакета, ключ объекта и query-параметры. Пример возможных query-параметров см. в описании метода для получения объекта.

Примечание

Если вы используете AWS SDK для .NET, обращайтесь к хосту s3.yandexcloud.net.

CORS запросы
Кросс-доменные запросы доступны для всех методов API, которые управляют объектами.

Для проверки разрешений CORS подразумевает предварительный запрос options к ресурсу. Object Storage позволяет отправлять кросс-доменные запросы к ресурсам без предварительного запроса, при этом в запросе должны быть те же заголовки, что и у предварительного запроса.

См. также

утентификация в API Object Storage
Статья создана

Yandex Cloud
Обновлена 19 мая 2025 г.
Вы можете работать с Object Storage с помощью следующих типов API:

AWS S3 API;
Yandex Cloud gRPC и REST API.
AWS S3 API
Для аутентификации в AWS S3 API и работы с Terraform и другими поддерживаемыми инструментами используйте статический ключ доступа. Статический ключ доступа выпускается на сервисный аккаунт, и все действия с использованием этого ключа выполняются от имени этого сервисного аккаунта. Подробнее см. Как пользоваться S3 API.

Статический ключ для доступа к Object Storage можно безопасно хранить в сервисе Yandex Lockbox. Подробнее см. Использование секрета Yandex Lockbox для хранения статического ключа доступа.

Полный перечень методов S3 API см. в Справочнике S3 API.

Примечание

Сервисный аккаунт может просматривать список бакетов только в том каталоге, в котором он был создан.

Сервисный аккаунт может выполнять действия с объектами в бакетах, которые созданы в каталогах, отличных от каталога сервисного аккаунта. Для этого назначьте сервисному аккаунту роли на нужный каталог или бакет в нем.

Если вы хотите использовать AWS S3 API напрямую, без SDK и приложений, вам придется самостоятельно подписывать запросы. Процесс формирования запроса и подписи вы можете отработать с помощью AWS CLI в режиме отладки.

Пример использования AWS S3 API
Начиная с версии 8.3.0 утилита curl поддерживает автоматическое формирование строки для подписи, подпись запроса и подстановку необходимых заголовков при работе с AWS S3 API.

Также вы можете вручную сформировать указанные заголовки и подписать запрос. См. пример для Версии curl 8.2.1 и ниже.

Примечание

Убедитесь, что сервисный аккаунт, от имени которого вы выполняете запрос, имеет необходимые права для выполнения запрашиваемого действия. Например, для загрузки объекта в бакет назначьте сервисному аккаунту роль storage.uploader на бакет. Подробнее см. Обзор способов управления доступом в Object Storage.

Ниже приведены примеры запросов для загрузки объекта в бакет.

AWS_KEY_ID="<идентификатор_статического_ключа>"
AWS_SECRET_KEY="<секретный_ключ>"
LOCAL_FILE="<путь_к_локальному_файлу>"
BUCKET_NAME="<имя_бакета>"
OBJECT_PATH="<ключ_объекта>"

curl \
  --request PUT \
  --user "${AWS_KEY_ID}:${AWS_SECRET_KEY}" \
  --aws-sigv4 "aws:amz:ru-central1:s3" \
  --upload-file "${LOCAL_FILE}" \
  --verbose \
  "https://storage.yandexcloud.net/${BUCKET_NAME}/${OBJECT_PATH}"

Где:

AWS_KEY_ID — идентификатор статического ключа доступа.
AWS_SECRET_KEY — секретный ключ.
LOCAL_FILE — путь к локальному файлу, который вы хотите загрузить, например ./sample.txt.
BUCKET_NAME — имя бакета, в который загружается файл.
OBJECT_PATH — ключ, который будет присвоен объекту в бакете, например new-prefix/sample-object.txt.
Аналогично вы можете загрузить файл в бакет, не сохраняя его локально. Например, заархивируйте директорию и отправьте архив в бакет:

AWS_KEY_ID="<идентификатор_статического_ключа>"
AWS_SECRET_KEY="<секретный_ключ>"
BUCKET_NAME="<имя_бакета>"
OBJECT_PATH="<ключ_объекта>"
DIRECTORY_PATH="<путь_к_директории>"

tar -cvzf - "${DIRECTORY_PATH}" | curl \
  --request PUT \
  --user "${AWS_KEY_ID}:${AWS_SECRET_KEY}" \
  --aws-sigv4 "aws:amz:ru-central1:s3" \
  --upload-file - \
  --verbose \
  "https://storage.yandexcloud.net/${BUCKET_NAME}/${OBJECT_PATH}"

Где DIRECTORY_PATH — путь к директории, которую вы хотите заархивировать.


Yandex Cloud gRPC и REST API
Для аутентификации в Yandex Cloud gRPC и REST API получите IAM-токен. Подробнее о получении IAM-токена для разных типов аккаунтов:

Аккаунт на Яндексе.
Федеративный аккаунт.
Сервисный аккаунт.
Полученный IAM-токен указывайте при обращении к ресурсам Yandex Cloud через API. Передайте IAM-токен в заголовке Authorization в следующем формате:

Authorization: Bearer <IAM-токен>

Полный перечень вызовов и методов Yandex Cloud API смотрите в справочниках gRPC API и REST API.

Пример использования Yandex Cloud API
В примере создается бакет со стандартным классом хранилища и размером 50 ГБ.

export IAM_TOKEN="<IAM-токен>"
grpcurl \
  -H "Authorization: Bearer $IAM_TOKEN" \
  -d '{
    "name": "<имя_бакета>",
    "folder_id": "<идентификатор_каталога>",
    "default_storage_class": "STANDARD",
    "max_size": "53687091200",
    "anonymous_access_flags": [{
      "read": false,
      "list": false,
      "configRead": false
    }]
  }' \
  storage.api.cloud.yandex.net:443 \
  yandex.cloud.storage.v1.BucketService/Create

Где:

IAM_TOKEN — IAM-токен. Подробнее см. Получение IAM-токена.
name — имя бакета.
folder_id — идентификатор каталога.
default_storage_class — класс хранилища.
max_size — размер бакета.
anonymous_access_flags — настройки доступа к бакету:
read — публичный доступ на чтение объектов.
list — публичный доступ к списку объектов.
configRead — публичный доступ на чтение настроек.
Результат:

{
  "id": "e3ehmmasama1********",
  "description": "create bucket",
  "createdAt": "2023-08-10T06:32:19.836842Z",
  "createdBy": "ajego134p5h1********",
  "modifiedAt": "2023-08-10T06:32:19.836842Z",
  "done": true,
  "metadata": {"@type":"type.googleapis.com/yandex.cloud.storage.v1.CreateBucketMetadata","name":"<имя_бакета>"},
  "response": {"@type":"type.googleapis.com/yandex.cloud.storage.v1.Bucket","acl":{},"anonymousAccessFlags":{"read":false,"list":false},"createdAt":"2023-08-10T06:32:17.557756Z","defaultStorageClass":"STANDARD","folderId":"b1gmit33ngp3********","maxSize":"53687091200","name":"<имя_бакета>","versioning":"VERSIONING_DISABLED"}
}