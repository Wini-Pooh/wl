<?php

namespace App\Console\Commands;

use App\Services\ImageProcessingService;
use Illuminate\Console\Command;
use Illuminate\Http\UploadedFile;
use Illuminate\Support\Facades\Storage;

class TestImageProcessing extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'test:image-processing';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π';

    /**
     * Execute the console command.
     */
    public function handle(ImageProcessingService $imageProcessingService)
    {
        $this->info('üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        $this->info('üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:');
        $this->line('- WebP –∫–∞—á–µ—Å—Ç–≤–æ: ' . config('image_processing.webp_quality'));
        $this->line('- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞: ' . config('image_processing.max_width'));
        $this->line('- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞: ' . config('image_processing.max_height'));
        $this->line('- –†–∞–∑–º–µ—Ä—ã –ø—Ä–µ–≤—å—é: ' . json_encode(config('image_processing.thumbnail_sizes')));

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Intervention Image
        try {
            $this->info('üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ Intervention Image...');
            
            // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            $testImagePath = storage_path('app/test_image.jpg');
            
            // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            $this->createTestImage($testImagePath);
            
            if (file_exists($testImagePath)) {
                $this->info('‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ: ' . $testImagePath);
                
                // –°–æ–∑–¥–∞–µ–º fake UploadedFile –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                $uploadedFile = new UploadedFile(
                    $testImagePath, 
                    'test-image.jpg', 
                    'image/jpeg', 
                    null, 
                    true
                );
                
                $this->info('üì§ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...');
                
                $result = $imageProcessingService->processUploadedImage(
                    $uploadedFile,
                    'test/processed',
                    'test_processed_image'
                );
                
                $this->info('‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ!');
                $this->line('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏:');
                $this->line('- –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: ' . $uploadedFile->getSize() . ' –±–∞–π—Ç');
                $this->line('- –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä: ' . $result['original']['file_size'] . ' –±–∞–π—Ç');
                $this->line('- –≠–∫–æ–Ω–æ–º–∏—è: ' . round((1 - $result['original']['file_size'] / $uploadedFile->getSize()) * 100, 2) . '%');
                $this->line('- –§–æ—Ä–º–∞—Ç –∏–∑–º–µ–Ω–µ–Ω: ' . ($result['original']['format_changed'] ? '–î–∞' : '–ù–µ—Ç'));
                $this->line('- –°–æ–∑–¥–∞–Ω–æ –ø—Ä–µ–≤—å—é: ' . count($result['thumbnails']));
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                $this->info('üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:');
                
                if (Storage::disk('public')->exists($result['original']['path'])) {
                    $this->line('‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª: ' . $result['original']['path']);
                } else {
                    $this->error('‚ùå –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ' . $result['original']['path']);
                }
                
                foreach ($result['thumbnails'] as $size => $thumbnail) {
                    if (Storage::disk('public')->exists($thumbnail['path'])) {
                        $this->line('‚úÖ –ü—Ä–µ–≤—å—é ' . $size . ': ' . $thumbnail['path']);
                    } else {
                        $this->error('‚ùå –ü—Ä–µ–≤—å—é ' . $size . ' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: ' . $thumbnail['path']);
                    }
                }
                
                // –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ
                $this->info('üóëÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤...');
                $deleted = $imageProcessingService->deleteImageWithThumbnails($result['original']['path']);
                
                if ($deleted) {
                    $this->info('‚úÖ –§–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã');
                } else {
                    $this->error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤');
                }
                
                // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
                if (file_exists($testImagePath)) {
                    unlink($testImagePath);
                }
                
            } else {
                $this->error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
                return 1;
            }
            
        } catch (\Exception $e) {
            $this->error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: ' . $e->getMessage());
            $this->error('–°—Ç–µ–∫ –æ—à–∏–±–∫–∏: ' . $e->getTraceAsString());
            return 1;
        }
        
        $this->info('üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
        return 0;
    }
    
    /**
     * –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Å—Ç–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
     */
    private function createTestImage(string $path): void
    {
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 200x200
        $image = imagecreatetruecolor(200, 200);
        
        // –ó–∞–ª–∏–≤–∞–µ–º —Å–∏–Ω–∏–º —Ü–≤–µ—Ç–æ–º
        $blue = imagecolorallocate($image, 0, 100, 200);
        imagefill($image, 0, 0, $blue);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
        $white = imagecolorallocate($image, 255, 255, 255);
        imagestring($image, 5, 50, 90, 'TEST', $white);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ JPEG
        imagejpeg($image, $path, 90);
        imagedestroy($image);
    }
}
