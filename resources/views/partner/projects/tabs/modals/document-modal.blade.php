<!-- –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (—É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤) -->
<div class="modal fade" id="documentPageModal" tabindex="-1" aria-labelledby="documentPageModalLabel" aria-hidden="true" data-bs-backdrop="static">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="documentPageModalLabel">
                    <i class="bi bi-file-earmark-text me-2"></i>–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="uploadDocumentForm" enctype="multipart/form-data">
                    @csrf
                    <input type="hidden" name="project_id" id="documentProjectId" value="{{ $project->id }}">
                    
                    <!-- –ó–æ–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ -->
                    <div class="upload-zone" id="documentUploadZone">
                        <div class="upload-content">
                            <i class="bi bi-file-earmark-arrow-up display-4 text-muted mb-3"></i>
                            <h5>–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã —Å—é–¥–∞</h5>
                            <p class="text-muted mb-3">–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤</p>
                            <input type="file" id="documentFileInput" name="documents[]" multiple 
                                   accept=".pdf,.doc,.docx,.xls,.xlsx,.txt,.rtf,.odt,.ods" class="d-none">
                            <button type="button" class="btn btn-primary" onclick="document.getElementById('documentFileInput').click()">
                                <i class="bi bi-plus-lg me-1"></i>–í—ã–±—Ä–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã
                            </button>
                            <div class="mt-2">
                                <small class="text-muted">
                                    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: PDF, DOC, DOCX, XLS, XLSX, TXT, RTF, ODT, ODS
                                </small>
                            </div>
                        </div>
                    </div>
                    
                    <!-- –°–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ -->
                    <div id="documentFileList" class="file-list mt-4" style="display: none;">
                        <h6>–í—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:</h6>
                        <div id="documentFileItems"></div>
                    </div>
                    
                    <!-- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã -->
                    <div class="row mt-4">
                        <div class="col-md-6">
                            <label for="documentType" class="form-label">–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞</label>
                            <div class="input-group">
                                <select class="form-select" id="documentTypeSelect" onchange="handleDocumentTypeChange()">
                                    <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø</option>
                                    <option value="contract">–î–æ–≥–æ–≤–æ—Ä</option>
                                    <option value="estimate">–°–º–µ—Ç–∞</option>
                                    <option value="plan">–ü–ª–∞–Ω/—á–µ—Ä—Ç–µ–∂</option>
                                    <option value="permit">–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ</option>
                                    <option value="technical">–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è</option>
                                    <option value="invoice">–°—á–µ—Ç</option>
                                    <option value="act">–ê–∫—Ç</option>
                                    <option value="certificate">–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç</option>
                                    <option value="photo_report">–§–æ—Ç–æ–æ—Ç—á–µ—Ç</option>
                                    <option value="correspondence">–ü–µ—Ä–µ–ø–∏—Å–∫–∞</option>
                                    <option value="other">–î—Ä—É–≥–æ–µ</option>
                                    <option value="custom">–°–≤–æ–π —Ç–∏–ø</option>
                                </select>
                                <button class="btn btn-outline-secondary" type="button" onclick="toggleCustomDocumentType()" title="–í–≤–µ—Å—Ç–∏ —Å–≤–æ–π —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞">
                                    <i class="bi bi-pencil"></i>
                                </button>
                            </div>
                            <input type="text" class="form-control mt-2" id="documentType" name="document_type" 
                                   placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞..." style="display: none;">
                        </div>
                        <div class="col-md-6">
                            <label for="documentImportance" class="form-label">–í–∞–∂–Ω–æ—Å—Ç—å</label>
                            <select class="form-select" id="documentImportance" name="importance">
                                <option value="normal">–û–±—ã—á–Ω–∞—è</option>
                                <option value="high">–í—ã—Å–æ–∫–∞—è</option>
                                <option value="urgent">–°—Ä–æ—á–Ω–∞—è</option>
                            </select>
                        </div>
                    </div>
                    
                    <div class="mt-3">
                        <label for="documentDescription" class="form-label">–û–ø–∏—Å–∞–Ω–∏–µ</label>
                        <textarea class="form-control" id="documentDescription" name="description" rows="3" 
                                  placeholder="–î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º..."></textarea>
                    </div>
                    
                    <!-- –ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏ -->
                    <div id="documentUploadProgress" class="mt-4" style="display: none;">
                        <div class="d-flex justify-content-between align-items-center mb-2">
                            <span>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...</span>
                            <span id="documentProgressText">0%</span>
                        </div>
                        <div class="progress">
                            <div class="progress-bar" id="documentProgressBar" role="progressbar" style="width: 0%"></div>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">–û—Ç–º–µ–Ω–∞</button>
                <button type="button" class="btn btn-primary" id="uploadDocumentBtn" disabled>
                    <i class="bi bi-upload me-1"></i>–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã
                </button>
            </div>
        </div>
    </div>
</div>

<script>
// –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
if (!window.documentModalInitialized) {
    window.documentModalInitialized = true;

    // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ ProjectManager
    $(document).ready(function() {
        console.log('üìÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º project ID
        const projectId = window.projectId || 
                         $('meta[name="project-id"]').attr('content') || 
                         $('#projectId').val() ||
                         $('[data-project-id]').data('project-id') ||
                         {{ $project->id ?? 'null' }};
        
        if (projectId && projectId !== 'null') {
            $('#documentProjectId').val(projectId);
            console.log('üìÑ Project ID —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', projectId);
        } else {
            console.error('‚ùå Project ID –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤');
        }
        
        if (window.projectManager) {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥–∞–ª–æ–≤
            window.projectManager.initModal('documentPageModal', 'document', function() {
                console.log('‚úÖ –ú–æ–¥–∞–ª –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ ProjectManager');
                initDocumentModalHandlers();
            });
        } else {
            console.warn('‚ö†Ô∏è ProjectManager –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é');
            initDocumentModalHandlers();
        }
    });
}

function initDocumentModalHandlers() {
    console.log('üìÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–∏ –ª–∏ —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    if (window.documentUploadHandlersInitialized) {
        console.log('‚ÑπÔ∏è –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
        return;
    }
    
    initDocumentUploadHandlers();
    
    // –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
    window.documentUploadHandlersInitialized = true;
    console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–æ–¥–∞–ª–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
}

function initDocumentUploadHandlers() {
    console.log('üìÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...');
    
    const uploadZone = document.getElementById('documentUploadZone');
    const fileInput = document.getElementById('documentFileInput');
    const fileList = document.getElementById('documentFileList');
    const fileItems = document.getElementById('documentFileItems');
    const uploadBtn = document.getElementById('uploadDocumentBtn');
    
    if (!uploadZone || !fileInput || !fileList || !fileItems || !uploadBtn) {
        console.error('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤');
        return;
    }
    
    let selectedFiles = [];

    // –ü–û–õ–ù–ê–Ø –û–ß–ò–°–¢–ö–ê —Å—Ç–∞—Ä—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å –∑–∞–º–µ–Ω–æ–π —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    console.log('üßπ –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ñ–∞–π–ª–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...');
    
    // –ö–ª–æ–Ω–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    const cleanUploadZone = uploadZone.cloneNode(true);
    const cleanFileInput = fileInput.cloneNode(true);
    const cleanUploadBtn = uploadBtn.cloneNode(true);
    
    uploadZone.parentNode.replaceChild(cleanUploadZone, uploadZone);
    fileInput.parentNode.replaceChild(cleanFileInput, fileInput);
    uploadBtn.parentNode.replaceChild(cleanUploadBtn, uploadBtn);

    // –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    const newUploadZone = document.getElementById('documentUploadZone');
    const newFileInput = document.getElementById('documentFileInput');
    const newUploadBtn = document.getElementById('uploadDocumentBtn');

    console.log('‚úÖ –≠–ª–µ–º–µ–Ω—Ç—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –æ—á–∏—â–µ–Ω—ã –∏ –∑–∞–º–µ–Ω–µ–Ω—ã');

    // Drag & Drop –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    newUploadZone.addEventListener('dragover', function(e) {
        e.preventDefault();
        e.stopPropagation();
        newUploadZone.classList.add('dragover');
    });

    newUploadZone.addEventListener('dragleave', function(e) {
        e.preventDefault();
        e.stopPropagation();
        newUploadZone.classList.remove('dragover');
    });

    newUploadZone.addEventListener('drop', function(e) {
        e.preventDefault();
        e.stopPropagation();
        newUploadZone.classList.remove('dragover');
        
        const files = Array.from(e.dataTransfer.files).filter(file => isValidDocumentFile(file));
        console.log('üìÇ Document files dropped:', files.length);
        handleFileSelection(files);
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ input
    newFileInput.addEventListener('change', function(e) {
        e.preventDefault();
        e.stopPropagation();
        const files = Array.from(e.target.files);
        console.log('üìÇ Document files selected via input:', files.length);
        handleFileSelection(files);
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∑–æ–Ω–µ –∑–∞–≥—Ä—É–∑–∫–∏
    newUploadZone.addEventListener('click', function(e) {
        e.preventDefault();
        e.stopPropagation();
        console.log('üìÇ Document upload zone clicked');
        newFileInput.click();
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–í—ã–±—Ä–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã"
    const selectBtn = newUploadZone.querySelector('button');
    if (selectBtn) {
        selectBtn.addEventListener('click', function(e) {
            e.preventDefault();
            e.stopPropagation();
            console.log('üìÇ Document select button clicked');
            newFileInput.click();
        });
    }

    function isValidDocumentFile(file) {
        const allowedTypes = [
            'application/pdf',
            'application/msword',
            'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
            'application/vnd.ms-excel',
            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
            'text/plain',
            'application/rtf',
            'application/vnd.oasis.opendocument.text',
            'application/vnd.oasis.opendocument.spreadsheet'
        ];
        return allowedTypes.includes(file.type);
    }

    function handleFileSelection(files) {
        console.log('üìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:', files.length);
        
        if (files.length === 0) {
            console.log('‚ÑπÔ∏è –î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã');
            return;
        }
        
        selectedFiles = files;
        displaySelectedFiles();
        newUploadBtn.disabled = false;
        
        console.log('‚úÖ –î–æ–∫—É–º–µ–Ω—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã:', selectedFiles.length);
    }

    function displaySelectedFiles() {
        console.log('üìã –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...');
        
        fileItems.innerHTML = '';
        
        if (selectedFiles.length === 0) {
            fileList.style.display = 'none';
            return;
        }
        
        fileList.style.display = 'block';
        
        selectedFiles.forEach((file, index) => {
            const fileItem = document.createElement('div');
            fileItem.className = 'file-item d-flex justify-content-between align-items-center p-2 border rounded mb-2';
            
            fileItem.innerHTML = `
                <div class="d-flex align-items-center">
                    <i class="bi bi-file-earmark me-2"></i>
                    <div>
                        <div class="file-name">${file.name}</div>
                        <div class="file-size text-muted">${formatFileSize(file.size)}</div>
                    </div>
                </div>
                <button type="button" class="btn btn-sm btn-outline-danger" onclick="removeDocumentFile(${index})">
                    <i class="bi bi-trash"></i>
                </button>
            `;
            
            fileItems.appendChild(fileItem);
        });
    }

    // –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
    window.removeDocumentFile = function(index) {
        selectedFiles.splice(index, 1);
        displaySelectedFiles();
        newUploadBtn.disabled = selectedFiles.length === 0;
    };

    function formatFileSize(bytes) {
        if (bytes === 0) return '0 Bytes';
        const k = 1024;
        const sizes = ['Bytes', 'KB', 'MB', 'GB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    newUploadBtn.addEventListener('click', function() {
        if (selectedFiles.length === 0) {
            console.log('‚ùå –ù–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏');
            return;
        }
        
        console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:', selectedFiles.length);
        uploadDocuments();
    });

    function uploadDocuments() {
        const projectId = $('#documentProjectId').val();
        
        if (!projectId) {
            console.error('‚ùå Project ID –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤');
            alert('–û—à–∏–±–∫–∞: ID –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        
        console.log('üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞:', projectId);
        
        const formData = new FormData();
        formData.append('project_id', projectId);
        formData.append('document_type', $('#documentType').val() || $('#documentTypeSelect').val());
        formData.append('importance', $('#documentImportance').val());
        formData.append('description', $('#documentDescription').val());
        
        selectedFiles.forEach(file => {
            formData.append('documents[]', file);
        });
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å (–∏–º–∏—Ç–∞—Ü–∏—è)
        const progressContainer = document.getElementById('documentUploadProgress');
        const progressBar = document.getElementById('documentProgressBar');
        const progressText = document.getElementById('documentProgressText');
        
        progressContainer.style.display = 'block';
        newUploadBtn.disabled = true;
        
        // –ü—Ä–æ—Å—Ç–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ AJAX –∑–∞–ø—Ä–æ—Å–∞
        setTimeout(() => {
            console.log('‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞');
            
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            const modal = bootstrap.Modal.getInstance(document.getElementById('documentPageModal'));
            if (modal) {
                modal.hide();
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            alert('–§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞');
            
            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            if (window.loadDocuments) {
                window.loadDocuments();
            } else if (window.location.pathname.includes('/documents')) {
                // window.location.reload(); // –û—Ç–∫–ª—é—á–∞–µ–º –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            }
            
            // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
            selectedFiles = [];
            displaySelectedFiles();
            document.getElementById('uploadDocumentForm').reset();
            
            // –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            progressContainer.style.display = 'none';
            newUploadBtn.disabled = false;
            progressBar.style.width = '0%';
            progressText.textContent = '0%';
        }, 1000);
    }
    
    console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
}
        displaySelectedFiles();
        uploadBtn.disabled = files.length === 0;
    }

    function displaySelectedFiles() {
        if (selectedFiles.length === 0) {
            fileList.style.display = 'none';
            return;
        }

        fileList.style.display = 'block';
        fileItems.innerHTML = '';

        selectedFiles.forEach((file, index) => {
            const fileItem = document.createElement('div');
            fileItem.className = 'file-item';
            fileItem.innerHTML = `
                <div class="file-icon">
                    <i class="bi bi-${getDocumentIcon(file.type)} text-primary"></i>
                </div>
                <div class="file-info">
                    <div class="file-name">${file.name}</div>
                    <div class="file-size">${formatFileSize(file.size)}</div>
                </div>
                <div class="file-actions">
                    <button type="button" class="btn btn-sm btn-outline-danger" onclick="removeDocumentFile(${index})">
                        <i class="bi bi-trash"></i>
                    </button>
                </div>
            `;
            fileItems.appendChild(fileItem);
        });
    }

    function getDocumentIcon(fileType) {
        switch (fileType) {
            case 'application/pdf':
                return 'file-earmark-pdf';
            case 'application/msword':
            case 'application/vnd.openxmlformats-officedocument.wordprocessingml.document':
                return 'file-earmark-word';
            case 'application/vnd.ms-excel':
            case 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet':
                return 'file-earmark-excel';
            case 'text/plain':
                return 'file-earmark-text';
            default:
                return 'file-earmark';
        }
    }

    window.removeDocumentFile = function(index) {
        selectedFiles.splice(index, 1);
        displaySelectedFiles();
        uploadBtn.disabled = selectedFiles.length === 0;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º input
        const dt = new DataTransfer();
        selectedFiles.forEach(file => dt.items.add(file));
        fileInput.files = dt.files;
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏
    uploadBtn.addEventListener('click', function() {
        if (selectedFiles.length === 0) {
            return;
        }

        uploadDocuments();
    });

    function uploadDocuments() {
        console.log('üì§ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...');
        
        const formData = new FormData();
        const projectId = $('#documentProjectId').val();
        
        if (!projectId) {
            console.error('‚ùå Project ID –Ω–µ –Ω–∞–π–¥–µ–Ω');
            if (window.modalManager) {
                window.modalManager.showErrorToast('–û—à–∏–±–∫–∞: ID –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }
            return;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ FormData
        formData.append('project_id', projectId);
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ (–∫–∞—Å—Ç–æ–º–Ω—ã–π –∏–ª–∏ –∏–∑ select)
        const documentTypeInput = $('#documentType');
        const documentTypeSelect = $('#documentTypeSelect');
        let documentType = '';
        
        if (documentTypeSelect.val() === 'custom' && documentTypeInput.val()) {
            documentType = documentTypeInput.val();
        } else if (documentTypeSelect.val() && documentTypeSelect.val() !== 'custom') {
            documentType = documentTypeSelect.val();
        }
        
        formData.append('document_type', documentType);
        formData.append('importance', $('#documentImportance').val());
        formData.append('description', $('#documentDescription').val());
        formData.append('_token', $('meta[name="csrf-token"]').attr('content'));
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã
        selectedFiles.forEach((file, index) => {
            formData.append('documents[]', file);
        });

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å (–∏–º–∏—Ç–∞—Ü–∏—è)
        showDocumentUploadProgress();
        
        // –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–≥—Ä—É–∑–∫–∏
        uploadBtn.disabled = true;
        uploadBtn.innerHTML = '<i class="bi bi-hourglass-split me-1"></i>–ó–∞–≥—Ä—É–∑–∫–∞...';

        // –ü—Ä–æ—Å—Ç–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ AJAX –∑–∞–ø—Ä–æ—Å–∞
        setTimeout(() => {
            console.log('‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞');
            
            hideDocumentUploadProgress();
            uploadBtn.disabled = false;
            uploadBtn.innerHTML = '<i class="bi bi-upload me-1"></i>–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã';
            
            if (window.modalManager) {
                window.modalManager.closeActiveModal();
                window.modalManager.showToast('–§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞', 'info');
            } else {
                alert('–§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞');
            }
            
            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            if (typeof window.reloadDocuments === 'function') {
                window.reloadDocuments();
            }
        }, 1500);
                    errorMessage = xhr.responseJSON.message;
                }
                
                if (window.modalManager) {
                    window.modalManager.showErrorToast(errorMessage);
                }
            }
        });
    }

    function showDocumentUploadProgress() {
        document.getElementById('documentUploadProgress').style.display = 'block';
    }

    function hideDocumentUploadProgress() {
        document.getElementById('documentUploadProgress').style.display = 'none';
    }

    function updateDocumentUploadProgress(percent) {
        const progressBar = document.getElementById('documentProgressBar');
        const progressText = document.getElementById('documentProgressText');
        
        progressBar.style.width = percent + '%';
        progressText.textContent = Math.round(percent) + '%';
    }

    function formatFileSize(bytes) {
        if (bytes === 0) return '0 Bytes';
        const k = 1024;
        const sizes = ['Bytes', 'KB', 'MB', 'GB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –ø–æ–ª—è–º–∏ —Ç–∏–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
function handleDocumentTypeChange() {
    const select = document.getElementById('documentTypeSelect');
    const input = document.getElementById('documentType');
    
    if (select.value === 'custom') {
        toggleCustomDocumentType();
    } else {
        input.style.display = 'none';
        input.value = '';
    }
}

function toggleCustomDocumentType() {
    const select = document.getElementById('documentTypeSelect');
    const input = document.getElementById('documentType');
    
    if (input.style.display === 'none' || input.style.display === '') {
        input.style.display = 'block';
        input.focus();
        select.value = 'custom';
    } else {
        input.style.display = 'none';
        input.value = '';
        select.value = '';
    }
}
</script>
