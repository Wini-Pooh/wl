@extends('partner.projects.layouts.project-base')

@section('page-content')
    @include('partner.projects.tabs.schemes')
    
    <!-- –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —Å—Ö–µ–º -->
    @include('partner.projects.tabs.modals.scheme-modal')
@endsection

@section('styles')
    @parent
    <!-- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å—Ö–µ–º -->
    <style>
        /* –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å—Ö–µ–º */
        .schemes-gallery {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
            gap: 1.5rem;
            margin-top: 1rem;
        }
        
        .scheme-card {
            border: 1px solid #e9ecef;
            border-radius: 12px;
            overflow: hidden;
            transition: all 0.3s ease;
            background: white;
        }
        
        .scheme-card:hover {
            transform: translateY(-4px);
            box-shadow: 0 8px 25px rgba(0,0,0,0.1);
            border-color: #28a745;
        }
        
        .scheme-preview {
            height: 220px;
            background: #f8f9fa;
            display: flex;
            align-items: center;
            justify-content: center;
            overflow: hidden;
            position: relative;
        }
        
        .scheme-preview img {
            max-width: 100%;
            max-height: 100%;
            object-fit: cover;
        }
        
        .scheme-actions {
            position: absolute;
            top: 10px;
            right: 10px;
            opacity: 0;
            transition: opacity 0.3s ease;
        }
        
        .scheme-card:hover .scheme-actions {
            opacity: 1;
        }
        
        .scheme-type-badge {
            position: absolute;
            bottom: 10px;
            left: 10px;
            background: rgba(40, 167, 69, 0.9);
            color: white;
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 0.75rem;
        }
        
        .scheme-upload-zone {
            border: 2px dashed #28a745;
            border-radius: 8px;
            padding: 2rem;
            text-align: center;
            background: #f8fff9;
            transition: all 0.3s ease;
        }
        
        .scheme-upload-zone:hover {
            border-color: #1e7e34;
            background: #f1f8f4;
        }
    </style>
@endsection

@section('scripts')
    @parent
    <script>
        $(document).ready(function() {
            console.log('=== –°–¢–†–ê–ù–ò–¶–ê –°–•–ï–ú –ü–†–û–ï–ö–¢–ê ===');
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ ProjectManager
            if (window.projectManager) {
                window.projectManager.initPage('schemes', function() {
                    console.log('‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—Ö–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —á–µ—Ä–µ–∑ ProjectManager');
                    loadSchemes();
                    initSchemesHandlers();
                });
            } else {
                console.warn('‚ö†Ô∏è ProjectManager –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é');
                initSchemesPage();
            }
        });
        
        function initSchemesPage() {
            console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å—Ö–µ–º...');
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ö–µ–º—ã
            loadSchemes();
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            initSchemesHandlers();
        }
        
        function loadSchemes() {
            console.log('ÔøΩ –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ö–µ–º...');
            
            $('#schemeLoadingIndicator').show();
            $('#schemeGallery').hide();
            
            // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            setTimeout(() => {
                const testSchemes = [
                    {
                        id: 1,
                        name: '–ü–ª–∞–Ω–∏—Ä–æ–≤–æ—á–Ω–∞—è —Å—Ö–µ–º–∞ 1 —ç—Ç–∞–∂',
                        original_name: 'plan_floor_1.dwg',
                        file_type: 'application/dwg',
                        file_size: 2048000,
                        url: '/storage/schemes/plan_floor_1.dwg',
                        uploaded_at: '2024-01-15 10:30:00',
                        scheme_type: '–ü–ª–∞–Ω–∏—Ä–æ–≤–∫–∞',
                        scale: '1:100'
                    },
                    {
                        id: 2,
                        name: '–°—Ö–µ–º–∞ —ç–ª–µ–∫—Ç—Ä–æ—Å–Ω–∞–±–∂–µ–Ω–∏—è',
                        original_name: 'electrical_scheme.pdf',
                        file_type: 'application/pdf',
                        file_size: 1536000,
                        url: '/storage/schemes/electrical_scheme.pdf',
                        uploaded_at: '2024-01-14 14:45:00',
                        scheme_type: '–≠–ª–µ–∫—Ç—Ä–∏–∫–∞',
                        scale: '1:50'
                    },
                    {
                        id: 3,
                        name: '–°—Ö–µ–º–∞ –≤–æ–¥–æ—Å–Ω–∞–±–∂–µ–Ω–∏—è',
                        original_name: 'water_supply.jpg',
                        file_type: 'image/jpeg',
                        file_size: 3072000,
                        url: '/storage/schemes/water_supply.jpg',
                        uploaded_at: '2024-01-13 16:20:00',
                        scheme_type: '–°–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞',
                        scale: '1:75'
                    }
                ];
                
                $('#schemeLoadingIndicator').hide();
                displaySchemes(testSchemes);
            }, 1000);
        }
        
        function displaySchemes(schemes) {
            const gallery = $('#schemeGallery');
            const emptyState = $('#emptySchemeState');
            const loading = $('#schemeLoadingIndicator');
            
            // –°–∫—Ä—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
            loading.hide();
            
            if (schemes.length === 0) {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                gallery.hide();
                emptyState.show();
                $('#schemeCount').text('0');
                return;
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–∞–ª–µ—Ä–µ—é
            emptyState.hide();
            gallery.show().empty();
            
            // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Å—Ö–µ–º
            schemes.forEach(scheme => {
                const schemeCard = createSchemeCard(scheme);
                gallery.append(schemeCard);
            });
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
            $('#schemeCount').text(schemes.length);
            
            // –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            initSchemesHandlers();
        }
        
        function createSchemeCard(scheme) {
            console.log('üé® –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å—Ö–µ–º—ã:', scheme);
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            let schemeType = scheme.scheme_type || scheme.type;
            let room = scheme.room || scheme.location;
            
            // –ï—Å–ª–∏ —ç—Ç–æ –∫–∞—Å—Ç–æ–º–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (–Ω–µ –≤ –±–∞–∑–æ–≤–æ–º —Å–ø–∏—Å–∫–µ), –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö –∫–∞–∫ –µ—Å—Ç—å
            const typeName = getSchemeTypeName(schemeType) || schemeType || '–°—Ö–µ–º–∞';
            const roomName = getRoomName(room) || room || '';
            
            const fileSize = formatFileSize(scheme.file_size || scheme.size);
            const date = formatDate(scheme.created_at);
            const fileExtension = getFileExtension(scheme.name || scheme.file_name || scheme.original_name);
            const isImage = isImageFile(fileExtension);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ URL —Ñ–∞–π–ª–∞
            const fileUrl = scheme.url || scheme.thumbnail_url || '/storage/' + scheme.path;
            
            return `
                <div class="col-sm-6 col-md-4 col-lg-3 mb-4">
                    <div class="card scheme-card h-100" data-id="${scheme.id}" data-type="${schemeType}" data-room="${room}">
                        <div class="scheme-preview position-relative">
                            ${isImage ? 
                                `<img src="${fileUrl}" alt="${scheme.name || scheme.file_name || scheme.original_name}" 
                                     class="img-fluid w-100" style="height: 200px; object-fit: cover;"
                                     onerror="this.src='/images/no-image-placeholder.png'">` :
                                `<div class="d-flex align-items-center justify-content-center h-100" style="height: 200px;">
                                     <i class="bi bi-file-earmark-${getFileIcon(fileExtension)} display-3 text-success"></i>
                                 </div>`
                            }
                            <div class="scheme-badges position-absolute top-0 start-0 p-2">
                                <span class="badge bg-success mb-1" title="–¢–∏–ø: ${typeName}">${typeName}</span>
                                ${roomName ? `<br><span class="badge bg-secondary" title="–ü–æ–º–µ—â–µ–Ω–∏–µ: ${roomName}">${roomName}</span>` : ''}
                                ${scheme.scale ? `<br><span class="badge bg-info text-dark" title="–ú–∞—Å—à—Ç–∞–±: ${scheme.scale}">${scheme.scale}</span>` : ''}
                            </div>
                            <div class="scheme-actions position-absolute top-0 end-0 p-2">
                                <button class="btn btn-sm btn-light view-scheme-btn me-1" data-scheme-id="${scheme.id}" title="–ü—Ä–æ—Å–º–æ—Ç—Ä">
                                    <i class="bi bi-eye"></i>
                                </button>
                                <button class="btn btn-sm btn-light download-scheme-btn me-1" data-scheme-id="${scheme.id}" title="–°–∫–∞—á–∞—Ç—å">
                                    <i class="bi bi-download"></i>
                                </button>
                                <button class="btn btn-sm btn-danger delete-scheme-btn" data-scheme-id="${scheme.id}" title="–£–¥–∞–ª–∏—Ç—å">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </div>
                        </div>
                        <div class="card-body">
                            <h6 class="card-title text-truncate" title="${scheme.name || scheme.file_name || scheme.original_name}">
                                ${scheme.name || scheme.file_name || scheme.original_name}
                            </h6>
                            <small class="text-muted">
                                ${fileSize} ‚Ä¢ ${date}
                                ${scheme.version ? ` ‚Ä¢ ${scheme.version}` : ''}
                            </small>
                            ${scheme.description || scheme.comment ? `<br><small class="text-muted">${scheme.description || scheme.comment}</small>` : ''}
                        </div>
                    </div>
                </div>
            `;
        }
        
        function initSchemesHandlers() {
            console.log('üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å—Ö–µ–º...');
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ö–µ–º—ã
            $(document).off('click', '.view-scheme-btn').on('click', '.view-scheme-btn', function(e) {
                e.preventDefault();
                e.stopPropagation();
                const schemeId = $(this).data('scheme-id');
                viewScheme(schemeId);
            });
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å—Ö–µ–º—ã
            $(document).off('click', '.download-scheme-btn').on('click', '.download-scheme-btn', function(e) {
                e.preventDefault();
                e.stopPropagation();
                const schemeId = $(this).data('scheme-id');
                downloadScheme(schemeId);
            });
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ö–µ–º—ã
            $(document).off('click', '.delete-scheme-btn').on('click', '.delete-scheme-btn', function(e) {
                e.preventDefault();
                e.stopPropagation();
                const schemeId = $(this).data('scheme-id');
                confirmDeleteScheme(schemeId);
            });
            
            // –ö–ª–∏–∫ –ø–æ –∫–∞—Ä—Ç–æ—á–∫–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            $(document).off('click', '.scheme-card').on('click', '.scheme-card', function(e) {
                if (!$(e.target).closest('.scheme-actions').length) {
                    const schemeId = $(this).data('id');
                    viewScheme(schemeId);
                }
            });
        }
        
        function initSchemesFilters() {
            console.log('üîç –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Å—Ö–µ–º...');
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ –æ–ø—Ü–∏–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
            loadCustomSchemeFilterOptions();
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
            $('.scheme-filter').off('change input').on('change input', function() {
                applySchemeFilters();
            });
            
            // –ü–æ–∏—Å–∫ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
            let searchTimeout;
            $('#schemeSearchFilter').off('input').on('input', function() {
                clearTimeout(searchTimeout);
                searchTimeout = setTimeout(() => {
                    applySchemeFilters();
                }, 300);
            });
            
            // –°–±—Ä–æ—Å —Ñ–∏–ª—å—Ç—Ä–æ–≤
            $('#clearSchemeFilters').off('click').on('click', function() {
                $('.scheme-filter').val('');
                $('#schemeSortFilter').val('created_at_desc');
                applySchemeFilters();
                showMessage('–§–∏–ª—å—Ç—Ä—ã —Å–±—Ä–æ—à–µ–Ω—ã', 'success');
            });
            
            // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
            $('#toggleSchemeFiltersBtn').off('click').on('click', function() {
                const advancedFilters = $('#advancedSchemeFilters');
                const icon = $(this).find('i');
                
                if (advancedFilters.is(':visible')) {
                    advancedFilters.slideUp();
                    icon.removeClass('bi-chevron-down').addClass('bi-chevron-up');
                } else {
                    advancedFilters.slideDown();
                    icon.removeClass('bi-chevron-up').addClass('bi-chevron-down');
                }
            });
            
            // –û—á–∏—Å—Ç–∫–∞ –ø–æ–∏—Å–∫–∞
            $('#clearSchemeSearchBtn').off('click').on('click', function() {
                $('#schemeSearchFilter').val('');
                applySchemeFilters();
            });
        }
        
        function viewScheme(schemeId) {
            const projectId = window.projectId;
            if (!projectId || !schemeId) {
                console.error('‚ùå Missing projectId or schemeId:', { projectId, schemeId });
                return;
            }
            
            console.log('üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ö–µ–º—ã:', { projectId, schemeId });
            
            // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ö–µ–º—ã
            const modalHtml = `
                <div class="modal fade" id="schemeViewModal" tabindex="-1" aria-hidden="true">
                    <div class="modal-dialog modal-lg modal-dialog-centered">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title">–ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ö–µ–º—ã</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                            </div>
                            <div class="modal-body text-center">
                                <div class="spinner-border" role="status">
                                    <span class="visually-hidden">–ó–∞–≥—Ä—É–∑–∫–∞...</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            `;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤ DOM
            $('body').append(modalHtml);
            const modal = new bootstrap.Modal(document.getElementById('schemeViewModal'));
            modal.show();
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ö–µ–º—ã (–æ—Ç–∫–ª—é—á–µ–Ω–æ)
            console.log('üëÅÔ∏è –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ö–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞');
            
            setTimeout(() => {
                $('#schemeViewModal .modal-body').html(`
                    <div class="alert alert-info">
                        <i class="bi bi-info-circle me-2"></i>
                        –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ö–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞
                    </div>
                `);
            }, 500);
            
            // –£–¥–∞–ª—è–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è
            $('#schemeViewModal').on('hidden.bs.modal', function() {
                $(this).remove();
            });
        }
        
        function downloadScheme(schemeId) {
            console.log('‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å—Ö–µ–º—ã:', schemeId);
            
            const projectId = window.projectId;
            if (!projectId || !schemeId) return;
            
            // –°–æ–∑–¥–∞–µ–º —Å–∫—Ä—ã—Ç—É—é —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            const link = document.createElement('a');
            link.href = `/partner/projects/${projectId}/schemes/${schemeId}/download`;
            link.download = '';
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        }
        
        function confirmDeleteScheme(schemeId) {
            console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ö–µ–º—ã (–±–µ–∑ AJAX):', schemeId);
            
            // –ü—Ä–æ—Å—Ç–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ AJAX –∑–∞–ø—Ä–æ—Å–∞
            if (confirm('–§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Ö–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?')) {
                showMessage('–§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Ö–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞', 'info');
            }
        }
        
        function applySchemeFilters() {
            // –ü—Ä–æ—Å—Ç–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
            const schemeType = $('#schemeTypeFilter').val();
            const room = $('#schemeRoomFilter').val();
            const search = $('#schemeSearchFilter').val().toLowerCase();
            const sort = $('#schemeSortFilter').val();
            const dateFrom = $('#schemeDateFromFilter').val();
            const dateTo = $('#schemeDateToFilter').val();
            
            const cards = $('.scheme-card').parent();
            let visibleCount = 0;
            
            cards.each(function() {
                const card = $(this);
                const cardType = card.find('.badge.bg-success').text();
                const cardRoom = card.find('.badge.bg-secondary').text();
                const cardTitle = card.find('.card-title').text().toLowerCase();
                const cardDate = card.find('.text-muted').text();
                
                let show = true;
                
                if (schemeType && !cardType.includes(getSchemeTypeName(schemeType))) show = false;
                if (room && !cardRoom.includes(getRoomName(room))) show = false;
                if (search && !cardTitle.includes(search)) show = false;
                
                // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–∞—Ç–µ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è)
                if (dateFrom || dateTo) {
                    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—É—é –ª–æ–≥–∏–∫—É —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –¥–∞—Ç–µ
                }
                
                if (show) {
                    card.show();
                    visibleCount++;
                } else {
                    card.hide();
                }
            });
            
            updateSchemeCount(visibleCount);
            updateActiveFiltersText();
        }
        
        function updateSchemeCount(count) {
            $('#schemeCount').text(count);
        }
        
        function updateActiveFiltersText() {
            let activeFilters = 0;
            
            if ($('#schemeTypeFilter').val()) activeFilters++;
            if ($('#schemeRoomFilter').val()) activeFilters++;
            if ($('#schemeSearchFilter').val()) activeFilters++;
            if ($('#schemeDateFromFilter').val()) activeFilters++;
            if ($('#schemeDateToFilter').val()) activeFilters++;
            
            $('#activeSchemeFiltersText').text(`–ê–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤: ${activeFilters}`);
        }
        
        function loadCustomSchemeFilterOptions() {
            const projectId = window.projectId;
            if (!projectId) {
                console.warn('‚ùå Project ID –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –æ–ø—Ü–∏–π');
                // –ï—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏–∑–≤–ª–µ–∫–∞–µ–º –æ–ø—Ü–∏–∏ –∏–∑ —É–∂–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–Ω—ã—Ö —Å—Ö–µ–º
                extractOptionsFromCurrentSchemes();
                return;
            }
            
            console.log('üìã –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –æ–ø—Ü–∏–π —Å—Ö–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–∞ (–±–µ–∑ AJAX)');
            console.log('üÜî Project ID:', projectId);
            
            // –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ–ø—Ü–∏–π –∏–∑ —É–∂–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–Ω—ã—Ö —Å—Ö–µ–º –≤–º–µ—Å—Ç–æ AJAX
            extractOptionsFromCurrentSchemes();
        }
        
        function updateSchemeFilterOptions(options) {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∏–ø —Å—Ö–µ–º—ã
            if (options.scheme_types && options.scheme_types.length > 0) {
                console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∏–ø—ã —Å—Ö–µ–º:', options.scheme_types);
                updateSchemeTypeFilter(options.scheme_types);
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–º–µ—â–µ–Ω–∏—è
            if (options.rooms && options.rooms.length > 0) {
                console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–º–µ—â–µ–Ω–∏—è —Å—Ö–µ–º:', options.rooms);
                updateSchemeRoomFilter(options.rooms);
            }
        }
        
        function extractOptionsFromCurrentSchemes() {
            // –ï—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏–∑–≤–ª–µ–∫–∞–µ–º –æ–ø—Ü–∏–∏ –∏–∑ —É–∂–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–Ω—ã—Ö —Å—Ö–µ–º
            const types = new Set();
            const rooms = new Set();
            
            $('#schemeGallery .scheme-card').each(function() {
                const typeText = $(this).find('.badge.bg-success').text().trim();
                const roomText = $(this).find('.badge.bg-secondary').text().trim();
                
                if (typeText && typeof typeText === 'string' && typeText.trim()) types.add(typeText.trim());
                if (roomText && typeof roomText === 'string' && roomText.trim()) rooms.add(roomText.trim());
            });
            
            updateSchemeFilterOptions({
                scheme_types: Array.from(types),
                rooms: Array.from(rooms)
            });
        }
        
        function updateFiltersWithData(schemes) {
            console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ —Å—Ö–µ–º...');
            
            // –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã –∏ –ø–æ–º–µ—â–µ–Ω–∏—è
            const types = new Set();
            const rooms = new Set();
            
            schemes.forEach(scheme => {
                if (scheme.scheme_type || scheme.type) {
                    types.add(scheme.scheme_type || scheme.type);
                }
                if (scheme.room || scheme.location) {
                    rooms.add(scheme.room || scheme.location);
                }
            });
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã —Ç–∏–ø–æ–≤
            updateSchemeTypeFilter(Array.from(types));
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ–º–µ—â–µ–Ω–∏–π
            updateSchemeRoomFilter(Array.from(rooms));
        }
        
        function updateSchemeTypeFilter(dynamicTypes) {
            const typeSelect = $('#schemeTypeFilter');
            
            // –ë–∞–∑–æ–≤—ã–µ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã
            const baseTypes = [
                { value: 'electrical', label: '–≠–ª–µ–∫—Ç—Ä–∏–∫–∞' },
                { value: 'plumbing', label: '–°–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞' },
                { value: 'ventilation', label: '–í–µ–Ω—Ç–∏–ª—è—Ü–∏—è' },
                { value: 'layout', label: '–ü–ª–∞–Ω–∏—Ä–æ–≤–∫–∞' },
                { value: 'structure', label: '–ö–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è' },
                { value: 'heating', label: '–û—Ç–æ–ø–ª–µ–Ω–∏–µ' },
                { value: 'flooring', label: '–ù–∞–ø–æ–ª—å–Ω—ã–µ –ø–æ–∫—Ä—ã—Ç–∏—è' },
                { value: 'ceiling', label: '–ü–æ—Ç–æ–ª–∫–∏' },
                { value: 'walls', label: '–°—Ç–µ–Ω—ã' },
                { value: 'doors', label: '–î–≤–µ—Ä–∏' },
                { value: 'windows', label: '–û–∫–Ω–∞' },
                { value: 'furniture', label: '–ú–µ–±–µ–ª—å' },
                { value: 'lighting', label: '–û—Å–≤–µ—â–µ–Ω–∏–µ' },
                { value: 'security', label: '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å' },
                { value: 'automation', label: '–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è' },
                { value: 'other', label: '–î—Ä—É–≥–æ–µ' }
            ];
            
            const currentValue = typeSelect.val();
            
            // –û—á–∏—â–∞–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—É—é –æ–ø—Ü–∏—é
            typeSelect.empty().append('<option value="">–í—Å–µ —Ç–∏–ø—ã</option>');
            
            // –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ —Ç–∏–ø—ã
            baseTypes.forEach(type => {
                typeSelect.append(`<option value="${type.value}">${type.label}</option>`);
            });
            
            // –î–æ–±–∞–≤–ª—è–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ (–∫–∞—Å—Ç–æ–º–Ω—ã–µ) —Ç–∏–ø—ã, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –±–∞–∑–æ–≤—ã—Ö
            const baseValues = baseTypes.map(type => type.value);
            dynamicTypes.forEach(type => {
                if (type && !baseValues.includes(type)) {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∫–∞—Å—Ç–æ–º–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
                    const displayLabel = getSchemeTypeName(type);
                    const optionValue = type;
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–º–µ—Ç–∫—É –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
                    const isCustom = !baseValues.includes(type);
                    const finalLabel = isCustom ? `${displayLabel} (–∫–∞—Å—Ç–æ–º–Ω—ã–π)` : displayLabel;
                    
                    typeSelect.append(`<option value="${optionValue}">${finalLabel}</option>`);
                }
            });
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            if (currentValue) {
                typeSelect.val(currentValue);
            }
        }
        
        function updateSchemeRoomFilter(dynamicRooms) {
            const roomSelect = $('#schemeRoomFilter');
            
            // –ë–∞–∑–æ–≤—ã–µ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–æ–º–µ—â–µ–Ω–∏—è
            const baseRooms = [
                { value: 'living_room', label: '–ì–æ—Å—Ç–∏–Ω–∞—è' },
                { value: 'bedroom', label: '–°–ø–∞–ª—å–Ω—è' },
                { value: 'kitchen', label: '–ö—É—Ö–Ω—è' },
                { value: 'bathroom', label: '–í–∞–Ω–Ω–∞—è' },
                { value: 'toilet', label: '–¢—É–∞–ª–µ—Ç' },
                { value: 'hallway', label: '–ü—Ä–∏—Ö–æ–∂–∞—è' },
                { value: 'balcony', label: '–ë–∞–ª–∫–æ–Ω' },
                { value: 'corridor', label: '–ö–æ—Ä–∏–¥–æ—Ä' },
                { value: 'pantry', label: '–ö–ª–∞–¥–æ–≤–∞—è' },
                { value: 'garage', label: '–ì–∞—Ä–∞–∂' },
                { value: 'basement', label: '–ü–æ–¥–≤–∞–ª' },
                { value: 'attic', label: '–ß–µ—Ä–¥–∞–∫' },
                { value: 'terrace', label: '–¢–µ—Ä—Ä–∞—Å–∞' },
                { value: 'entire', label: '–í—Å—è –∫–≤–∞—Ä—Ç–∏—Ä–∞/–¥–æ–º' },
                { value: 'other', label: '–î—Ä—É–≥–æ–µ' }
            ];
            
            const currentValue = roomSelect.val();
            
            // –û—á–∏—â–∞–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—É—é –æ–ø—Ü–∏—é
            roomSelect.empty().append('<option value="">–í—Å–µ –ø–æ–º–µ—â–µ–Ω–∏—è</option>');
            
            // –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –ø–æ–º–µ—â–µ–Ω–∏—è
            baseRooms.forEach(room => {
                roomSelect.append(`<option value="${room.value}">${room.label}</option>`);
            });
            
            // –î–æ–±–∞–≤–ª—è–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ (–∫–∞—Å—Ç–æ–º–Ω—ã–µ) –ø–æ–º–µ—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –±–∞–∑–æ–≤—ã—Ö
            const baseValues = baseRooms.map(room => room.value);
            dynamicRooms.forEach(room => {
                if (room && !baseValues.includes(room)) {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∫–∞—Å—Ç–æ–º–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
                    const displayLabel = getRoomName(room) || room;
                    const optionValue = room;
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–º–µ—Ç–∫—É –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
                    const isCustom = !baseValues.includes(room);
                    const finalLabel = isCustom ? `${displayLabel} (–∫–∞—Å—Ç–æ–º–Ω–æ–µ)` : displayLabel;
                    
                    roomSelect.append(`<option value="${optionValue}">${finalLabel}</option>`);
                }
            });
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            if (currentValue) {
                roomSelect.val(currentValue);
            }
        }
        
        // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        function getSchemeTypeName(type) {
            const types = {
                'electrical': '–≠–ª–µ–∫—Ç—Ä–∏–∫–∞',
                'plumbing': '–°–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞',
                'ventilation': '–í–µ–Ω—Ç–∏–ª—è—Ü–∏—è',
                'layout': '–ü–ª–∞–Ω–∏—Ä–æ–≤–∫–∞',
                'structure': '–ö–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è',
                'heating': '–û—Ç–æ–ø–ª–µ–Ω–∏–µ',
                'flooring': '–ù–∞–ø–æ–ª—å–Ω—ã–µ –ø–æ–∫—Ä—ã—Ç–∏—è',
                'ceiling': '–ü–æ—Ç–æ–ª–∫–∏',
                'walls': '–°—Ç–µ–Ω—ã',
                'doors': '–î–≤–µ—Ä–∏',
                'windows': '–û–∫–Ω–∞',
                'furniture': '–ú–µ–±–µ–ª—å',
                'lighting': '–û—Å–≤–µ—â–µ–Ω–∏–µ',
                'security': '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å',
                'automation': '–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è',
                'other': '–î—Ä—É–≥–æ–µ',
                'general': '–û–±—â–∞—è'
            };
            
            // –ï—Å–ª–∏ –µ—Å—Ç—å –≥–æ—Ç–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
            if (types[type]) {
                return types[type];
            }
            
            // –ï—Å–ª–∏ —ç—Ç–æ –∫–∞—Å—Ç–æ–º–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å, –Ω–æ —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã
            if (type && typeof type === 'string') {
                return type.charAt(0).toUpperCase() + type.slice(1);
            }
            
            return '–°—Ö–µ–º–∞';
        }
        
        function getRoomName(room) {
            const rooms = {
                'living_room': '–ì–æ—Å—Ç–∏–Ω–∞—è',
                'bedroom': '–°–ø–∞–ª—å–Ω—è',
                'kitchen': '–ö—É—Ö–Ω—è',
                'bathroom': '–í–∞–Ω–Ω–∞—è',
                'toilet': '–¢—É–∞–ª–µ—Ç',
                'hallway': '–ü—Ä–∏—Ö–æ–∂–∞—è',
                'balcony': '–ë–∞–ª–∫–æ–Ω',
                'corridor': '–ö–æ—Ä–∏–¥–æ—Ä',
                'pantry': '–ö–ª–∞–¥–æ–≤–∞—è',
                'garage': '–ì–∞—Ä–∞–∂',
                'basement': '–ü–æ–¥–≤–∞–ª',
                'attic': '–ß–µ—Ä–¥–∞–∫',
                'terrace': '–¢–µ—Ä—Ä–∞—Å–∞',
                'entire': '–í—Å—è –∫–≤–∞—Ä—Ç–∏—Ä–∞/–¥–æ–º',
                'other': '–î—Ä—É–≥–æ–µ'
            };
            
            // –ï—Å–ª–∏ –µ—Å—Ç—å –≥–æ—Ç–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
            if (rooms[room]) {
                return rooms[room];
            }
            
            // –ï—Å–ª–∏ —ç—Ç–æ –∫–∞—Å—Ç–æ–º–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å, –Ω–æ —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã
            if (room && typeof room === 'string') {
                return room.charAt(0).toUpperCase() + room.slice(1);
            }
            
            return '';
        }
        
        function getFileExtension(filename) {
            if (!filename) return '';
            return filename.split('.').pop().toLowerCase() || '';
        }
        
        function isImageFile(extension) {
            const imageExtensions = ['jpg', 'jpeg', 'png', 'gif', 'webp', 'svg', 'bmp', 'tiff'];
            return imageExtensions.includes(extension.toLowerCase());
        }
        
        function getFileIcon(extension) {
            const icons = {
                'pdf': 'pdf',
                'dwg': 'image', 'dxf': 'image',
                'ai': 'image', 'svg': 'image',
                'cad': 'image', 'autocad': 'image',
                'doc': 'word', 'docx': 'word',
                'xls': 'excel', 'xlsx': 'excel',
                'ppt': 'powerpoint', 'pptx': 'powerpoint',
                'txt': 'text',
                'zip': 'archive', 'rar': 'archive', '7z': 'archive'
            };
            return icons[extension.toLowerCase()] || 'text';
        }
        
        function formatFileSize(bytes) {
            if (!bytes || bytes === 0) return '0 –ë';
            const sizes = ['–ë', '–ö–ë', '–ú–ë', '–ì–ë'];
            const i = Math.floor(Math.log(bytes) / Math.log(1024));
            return parseFloat((bytes / Math.pow(1024, i)).toFixed(1)) + ' ' + sizes[i];
        }
        
        function formatDate(dateString) {
            if (!dateString) return '';
            const date = new Date(dateString);
            return new Intl.DateTimeFormat('ru-RU', {
                day: '2-digit',
                month: '2-digit',
                year: 'numeric'
            }).format(date);
        }
        
        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        function showMessage(message, type = 'info') {
            console.log(`üì¢ –°–æ–æ–±—â–µ–Ω–∏–µ (${type}):`, message);
            
            if (window.modalManager) {
                if (type === 'success') {
                    window.modalManager.showSuccessToast(message);
                } else if (type === 'error') {
                    window.modalManager.showErrorToast(message);
                } else {
                    window.modalManager.showToast(message);
                }
            } else {
                // Fallback —á–µ—Ä–µ–∑ –æ–±—ã—á–Ω—ã–π alert
                alert(message);
            }
        }
        
        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ö–µ–º –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        window.reloadSchemes = function() {
            console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ö–µ–º...');
            loadSchemes();
        };
    </script>
@endsection

{{-- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω --}}
@include('partner.projects.tabs.modals.init-modals')
