/**
 * –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∞—Å–æ–∫ –≤ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–Ω–∞—Ö
 * –ê–≤—Ç–æ—Ä: System Administrator
 * –í–µ—Ä—Å–∏—è: 1.0
 */

class ModalMaskDiagnostic {
    constructor() {
        this.init();
    }
    
    init() {
        console.log('üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –º–æ–¥—É–ª—å –¥–ª—è –º–∞—Å–æ–∫ –∑–∞–ø—É—â–µ–Ω');
        
        // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
        $(document).on('shown.bs.modal', (e) => {
            this.diagnoseModal(e.target);
        });
        
        // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º
        $(document).on('submit', 'form', (e) => {
            this.diagnoseFormSubmit(e.target);
        });
    }
    
    diagnoseModal(modal) {
        const modalId = modal.id;
        console.log(`üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞: ${modalId}`);
        
        // –ò—â–µ–º –ø–æ–ª—è —Å –º–∞—Å–∫–∞–º–∏
        const maskedFields = modal.querySelectorAll('[data-mask], .price-mask, .quantity-mask, .progress-mask');
        
        if (maskedFields.length === 0) {
            console.log('‚ÑπÔ∏è –í –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ –Ω–µ—Ç –ø–æ–ª–µ–π —Å –º–∞—Å–∫–∞–º–∏');
            return;
        }
        
        console.log(`üé≠ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ–π —Å –º–∞—Å–∫–∞–º–∏: ${maskedFields.length}`);
        
        maskedFields.forEach((field, index) => {
            const maskType = field.getAttribute('data-mask') || this.detectMaskTypeByClass(field);
            const isMasked = !!field.masked;
            const hasJQueryMask = !!$(field).data('mask');
            
            console.log(`   ${index + 1}. –ü–æ–ª–µ: ${field.id || field.name || 'unnamed'}`);
            console.log(`      - –¢–∏–ø –º–∞—Å–∫–∏: ${maskType}`);
            console.log(`      - –ú–∞—Å–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞: ${isMasked}`);
            console.log(`      - jQuery mask: ${hasJQueryMask}`);
            console.log(`      - –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: "${field.value}"`);
            
            // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–≤–æ–¥
            this.testFieldInput(field, maskType);
        });
    }
    
    detectMaskTypeByClass(element) {
        if (element.classList.contains('price-mask')) return 'currency';
        if (element.classList.contains('quantity-mask')) return 'decimal';
        if (element.classList.contains('progress-mask')) return 'percentage';
        if (element.classList.contains('phone-mask')) return 'phone';
        if (element.classList.contains('date-mask')) return 'date';
        return 'unknown';
    }
    
    testFieldInput(field, maskType) {
        // –í—Ä–µ–º–µ–Ω–Ω–æ —Ñ–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ –ø–æ–ª–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        field.focus();
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–≤–æ–¥—ã
        const testValues = {
            currency: ['123456', '1234.56', '1234,56'],
            decimal: ['123.456', '123,456', '12'],
            percentage: ['100', '99.5', '50,25'],
            phone: ['9123456789', '+79123456789'],
            date: ['01012023', '01.01.2023']
        };
        
        if (testValues[maskType]) {
            console.log(`      üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è ${maskType}:`);
            
            testValues[maskType].forEach(testValue => {
                // –í—Ä–µ–º–µ–Ω–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
                const originalValue = field.value;
                field.value = testValue;
                
                // –≠–º—É–ª–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ input
                field.dispatchEvent(new Event('input', { bubbles: true }));
                
                console.log(`         "${testValue}" ‚Üí "${field.value}"`);
                
                // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
                field.value = originalValue;
            });
        }
        
        field.blur();
    }
    
    diagnoseFormSubmit(form) {
        console.log(`üìã –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã: ${form.id || 'unnamed'}`);
        
        const formData = new FormData(form);
        const maskedFields = form.querySelectorAll('[data-mask], .price-mask, .quantity-mask, .progress-mask');
        
        console.log('üìä –î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã:');
        for (let [key, value] of formData.entries()) {
            console.log(`   ${key}: "${value}"`);
        }
        
        console.log('üé≠ –ó–∞–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—è:');
        maskedFields.forEach(field => {
            const numericValue = this.extractNumericValue(field.value);
            console.log(`   ${field.name}: "${field.value}" ‚Üí ${numericValue}`);
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        this.checkForInvalidCharacters(form);
    }
    
    extractNumericValue(value) {
        if (!value) return 0;
        
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä –∏ –∑–∞–ø—è—Ç—ã—Ö/—Ç–æ—á–µ–∫
        const cleaned = value.replace(/[^\d,\.]/g, '');
        
        // –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É
        const normalized = cleaned.replace(',', '.');
        
        return parseFloat(normalized) || 0;
    }
    
    checkForInvalidCharacters(form) {
        const formData = new FormData(form);
        const invalidPatterns = [
            /[{}\[\]\\|]/,  // –°–∏–º–≤–æ–ª—ã –º–∞—Å–æ–∫
            /\d+{\d+,\d+}\[,\d+/  // –ü–∞—Ç—Ç–µ—Ä–Ω –≤–∏–¥–∞ "2{1,12}[,2"
        ];
        
        console.log('üö® –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã:');
        
        for (let [key, value] of formData.entries()) {
            if (typeof value === 'string') {
                invalidPatterns.forEach((pattern, index) => {
                    if (pattern.test(value)) {
                        console.error(`   ‚ùå –ü–æ–ª–µ "${key}" —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã (–ø–∞—Ç—Ç–µ—Ä–Ω ${index + 1}): "${value}"`);
                    }
                });
            }
        }
    }
    
    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª–µ–π
    fixFieldValues(form) {
        console.log('üîß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ–ª–µ–π...');
        
        const maskedFields = form.querySelectorAll('[data-mask], .price-mask, .quantity-mask, .progress-mask');
        
        maskedFields.forEach(field => {
            if (field.value) {
                const numericValue = this.extractNumericValue(field.value);
                const fixedValue = numericValue.toString();
                
                if (field.value !== fixedValue) {
                    console.log(`   üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ${field.name}: "${field.value}" ‚Üí "${fixedValue}"`);
                    field.value = fixedValue;
                }
            }
        });
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
window.modalMaskDiagnostic = new ModalMaskDiagnostic();

console.log('üîç –ú–æ–¥—É–ª—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –º–∞—Å–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
