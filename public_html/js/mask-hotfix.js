/**
 * –•–æ—Ç—Ñ–∏–∫—Å –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å –º–∞—Å–∫–∞–º–∏ –≤ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–Ω–∞—Ö
 * –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç AJAX –∑–∞–ø—Ä–æ—Å—ã –∏ –æ—á–∏—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
 * –í–µ—Ä—Å–∏—è: 1.0
 */

(function() {
    'use strict';
    
    console.log('üîß –ó–∞–≥—Ä—É–∑–∫–∞ —Ö–æ—Ç—Ñ–∏–∫—Å–∞ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞—Å–æ–∫...');
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∑–Ω–∞—á–µ–Ω–∏—è –æ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    function cleanMaskedValue(value) {
        if (typeof value !== 'string') return value;
        
        // –£–¥–∞–ª—è–µ–º —Å–∏–º–≤–æ–ª—ã –º–∞—Å–æ–∫
        let cleaned = value.replace(/[{}\[\]\\|]/g, '');
        
        // –ï—Å–ª–∏ —ç—Ç–æ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å –∑–∞–ø—è—Ç–æ–π
        if (/^\d+,\d+$/.test(cleaned)) {
            const numeric = parseFloat(cleaned.replace(',', '.'));
            return numeric.toString();
        }
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ç–∏–ø–∞ "2{1,12}[,2"
        if (/\d+{\d+,\d+}\[,\d+/.test(value)) {
            // –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ –¥–æ –ø–µ—Ä–≤–æ–≥–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
            const match = value.match(/^(\d+(?:,\d+)?)/);
            if (match) {
                const numeric = parseFloat(match[1].replace(',', '.'));
                return numeric.toString();
            }
        }
        
        return cleaned;
    }
    
    // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º jQuery AJAX
    if (typeof $ !== 'undefined') {
        const originalAjax = $.ajax;
        
        $.ajax = function(options) {
            // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
            if (options.data instanceof FormData) {
                console.log('üîß –û–±—Ä–∞–±–æ—Ç–∫–∞ FormData –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π...');
                
                const entries = Array.from(options.data.entries());
                
                // –û—á–∏—â–∞–µ–º FormData
                options.data = new FormData();
                
                // –î–æ–±–∞–≤–ª—è–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                entries.forEach(([key, value]) => {
                    const cleanedValue = cleanMaskedValue(value);
                    options.data.append(key, cleanedValue);
                    
                    if (cleanedValue !== value) {
                        console.log(`üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ ${key}: "${value}" ‚Üí "${cleanedValue}"`);
                    }
                });
            }
            
            return originalAjax.call(this, options);
        };
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —Å–≤–æ–π—Å—Ç–≤–∞ –∏ –º–µ—Ç–æ–¥—ã
        Object.keys(originalAjax).forEach(key => {
            $.ajax[key] = originalAjax[key];
        });
    }
    
    // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º fetch API
    const originalFetch = window.fetch;
    
    window.fetch = function(url, options = {}) {
        if (options.body instanceof FormData) {
            console.log('üîß –û–±—Ä–∞–±–æ—Ç–∫–∞ FormData –≤ fetch –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π...');
            
            const entries = Array.from(options.body.entries());
            const newFormData = new FormData();
            
            entries.forEach(([key, value]) => {
                const cleanedValue = cleanMaskedValue(value);
                newFormData.append(key, cleanedValue);
                
                if (cleanedValue !== value) {
                    console.log(`üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ ${key}: "${value}" ‚Üí "${cleanedValue}"`);
                }
            });
            
            options.body = newFormData;
        }
        
        return originalFetch.call(this, url, options);
    };
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö —Ñ–æ—Ä–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    $(document).on('submit', 'form', function(e) {
        console.log('üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º—ã –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π...');
        
        const form = this;
        const inputs = form.querySelectorAll('input[type="text"], input[type="number"]');
        
        inputs.forEach(input => {
            if (input.value && /[{}\[\]\\|]/.test(input.value)) {
                const originalValue = input.value;
                const cleanedValue = cleanMaskedValue(input.value);
                input.value = cleanedValue;
                
                console.log(`üîß –û—á–∏—â–µ–Ω–æ –ø–æ–ª–µ ${input.name}: "${originalValue}" ‚Üí "${cleanedValue}"`);
            }
        });
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
    $(document).on('shown.bs.modal', function(e) {
        const modal = e.target;
        console.log('üîß –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –æ—Ç–∫—Ä—ã—Ç–æ, –ø—Ä–∏–º–µ–Ω—è–µ–º –∑–∞—â–∏—Ç—É:', modal.id);
        
        // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ø–æ–ª—è —Å –º–∞—Å–∫–∞–º–∏
        const maskedFields = modal.querySelectorAll('[data-mask], .price-mask, .quantity-mask, .progress-mask');
        
        maskedFields.forEach(field => {
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–∏ –ø–æ—Ç–µ—Ä–µ —Ñ–æ–∫—É—Å–∞
            field.addEventListener('blur', function() {
                if (this.value && /[{}\[\]\\|]/.test(this.value)) {
                    const cleanedValue = cleanMaskedValue(this.value);
                    console.log(`üîß –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ –ø–æ–ª—è ${this.name}: "${this.value}" ‚Üí "${cleanedValue}"`);
                    this.value = cleanedValue;
                }
            });
        });
    });
    
    console.log('‚úÖ –•–æ—Ç—Ñ–∏–∫—Å –¥–ª—è –º–∞—Å–æ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    
})();
